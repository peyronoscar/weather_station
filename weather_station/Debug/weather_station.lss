
weather_station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a8  00800060  00002fea  0000307e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008e  00800308  00800308  00003326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00003394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fe2  00000000  00000000  00003604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c14  00000000  00000000  000055e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f8e  00000000  00000000  000061fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000754  00000000  00000000  00008188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092b  00000000  00000000  000088dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6f  00000000  00000000  00009207  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00009f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	36 c0       	rjmp	.+108    	; 0x6e <__ctors_end>
       2:	00 00       	nop
       4:	50 c0       	rjmp	.+160    	; 0xa6 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_2>
       c:	4c c0       	rjmp	.+152    	; 0xa6 <__bad_interrupt>
       e:	00 00       	nop
      10:	4a c0       	rjmp	.+148    	; 0xa6 <__bad_interrupt>
      12:	00 00       	nop
      14:	48 c0       	rjmp	.+144    	; 0xa6 <__bad_interrupt>
      16:	00 00       	nop
      18:	46 c0       	rjmp	.+140    	; 0xa6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	44 c0       	rjmp	.+136    	; 0xa6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	42 c0       	rjmp	.+132    	; 0xa6 <__bad_interrupt>
      22:	00 00       	nop
      24:	40 c0       	rjmp	.+128    	; 0xa6 <__bad_interrupt>
      26:	00 00       	nop
      28:	3e c0       	rjmp	.+124    	; 0xa6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3c c0       	rjmp	.+120    	; 0xa6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3a c0       	rjmp	.+116    	; 0xa6 <__bad_interrupt>
      32:	00 00       	nop
      34:	38 c0       	rjmp	.+112    	; 0xa6 <__bad_interrupt>
      36:	00 00       	nop
      38:	36 c0       	rjmp	.+108    	; 0xa6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	34 c0       	rjmp	.+104    	; 0xa6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	32 c0       	rjmp	.+100    	; 0xa6 <__bad_interrupt>
      42:	00 00       	nop
      44:	30 c0       	rjmp	.+96     	; 0xa6 <__bad_interrupt>
      46:	00 00       	nop
      48:	2e c0       	rjmp	.+92     	; 0xa6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2c c0       	rjmp	.+88     	; 0xa6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2a c0       	rjmp	.+84     	; 0xa6 <__bad_interrupt>
      52:	00 00       	nop
      54:	e9 00       	.word	0x00e9	; ????
      56:	e6 00       	.word	0x00e6	; ????
      58:	e3 00       	.word	0x00e3	; ????
      5a:	e1 00       	.word	0x00e1	; ????
      5c:	02 01       	movw	r0, r4
      5e:	f2 00       	.word	0x00f2	; ????
      60:	ef 00       	.word	0x00ef	; ????
      62:	ec 00       	.word	0x00ec	; ????
      64:	fd 00       	.word	0x00fd	; ????
      66:	fa 00       	.word	0x00fa	; ????
      68:	f7 00       	.word	0x00f7	; ????
      6a:	f5 00       	.word	0x00f5	; ????
      6c:	00 01       	movw	r0, r0

0000006e <__ctors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf e5       	ldi	r28, 0x5F	; 95
      74:	d4 e0       	ldi	r29, 0x04	; 4
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	13 e0       	ldi	r17, 0x03	; 3
      7c:	a0 e6       	ldi	r26, 0x60	; 96
      7e:	b0 e0       	ldi	r27, 0x00	; 0
      80:	ea ee       	ldi	r30, 0xEA	; 234
      82:	ff e2       	ldi	r31, 0x2F	; 47
      84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0
      8a:	a8 30       	cpi	r26, 0x08	; 8
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
      90:	23 e0       	ldi	r18, 0x03	; 3
      92:	a8 e0       	ldi	r26, 0x08	; 8
      94:	b3 e0       	ldi	r27, 0x03	; 3
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	a6 39       	cpi	r26, 0x96	; 150
      9c:	b2 07       	cpc	r27, r18
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
      a0:	1b d7       	rcall	.+3638   	; 0xed8 <main>
      a2:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <_exit>

000000a6 <__bad_interrupt>:
      a6:	ac cf       	rjmp	.-168    	; 0x0 <__vectors>

000000a8 <adc_init>:

/* Header Files Post Libraries */
#include "adc.h"

/* Body */
void adc_init(void){
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	// 16Mhz/128 = 125Khz the ADC reference clock
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
      b0:	86 e2       	ldi	r24, 0x26	; 38
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	26 e2       	ldi	r18, 0x26	; 38
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	f9 01       	movw	r30, r18
      ba:	20 81       	ld	r18, Z
      bc:	27 60       	ori	r18, 0x07	; 7
      be:	fc 01       	movw	r30, r24
      c0:	20 83       	st	Z, r18
	
	// Voltage reference from Avcc (5v)
	ADMUX |= (1<<REFS0);
      c2:	87 e2       	ldi	r24, 0x27	; 39
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	27 e2       	ldi	r18, 0x27	; 39
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	f9 01       	movw	r30, r18
      cc:	20 81       	ld	r18, Z
      ce:	20 64       	ori	r18, 0x40	; 64
      d0:	fc 01       	movw	r30, r24
      d2:	20 83       	st	Z, r18
	
	// Turn on ADC
	ADCSRA |= (1<<ADEN);
      d4:	86 e2       	ldi	r24, 0x26	; 38
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	26 e2       	ldi	r18, 0x26	; 38
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	f9 01       	movw	r30, r18
      de:	20 81       	ld	r18, Z
      e0:	20 68       	ori	r18, 0x80	; 128
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
}
      e6:	00 00       	nop
      e8:	df 91       	pop	r29
      ea:	cf 91       	pop	r28
      ec:	08 95       	ret

000000ee <read_adc>:

int read_adc(uint8_t channel){
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	1f 92       	push	r1
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	89 83       	std	Y+1, r24	; 0x01
	// Clear the older channel that was read
	ADMUX &= 0b11100010;
      fa:	87 e2       	ldi	r24, 0x27	; 39
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	27 e2       	ldi	r18, 0x27	; 39
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	20 81       	ld	r18, Z
     106:	22 7e       	andi	r18, 0xE2	; 226
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18
	
	// Defines the new ADC channel to be read
	ADMUX |= channel;
     10c:	87 e2       	ldi	r24, 0x27	; 39
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	27 e2       	ldi	r18, 0x27	; 39
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	f9 01       	movw	r30, r18
     116:	30 81       	ld	r19, Z
     118:	29 81       	ldd	r18, Y+1	; 0x01
     11a:	23 2b       	or	r18, r19
     11c:	fc 01       	movw	r30, r24
     11e:	20 83       	st	Z, r18
	
	// Starts a new conversion
	ADCSRA |= (1<<ADSC);
     120:	86 e2       	ldi	r24, 0x26	; 38
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	26 e2       	ldi	r18, 0x26	; 38
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	f9 01       	movw	r30, r18
     12a:	20 81       	ld	r18, Z
     12c:	20 64       	ori	r18, 0x40	; 64
     12e:	fc 01       	movw	r30, r24
     130:	20 83       	st	Z, r18
	
	// Wait until the conversion is done
	while(ADCSRA & (1<<ADSC));
     132:	00 00       	nop
     134:	86 e2       	ldi	r24, 0x26	; 38
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	80 81       	ld	r24, Z
     13c:	88 2f       	mov	r24, r24
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	80 74       	andi	r24, 0x40	; 64
     142:	99 27       	eor	r25, r25
     144:	89 2b       	or	r24, r25
     146:	b1 f7       	brne	.-20     	; 0x134 <read_adc+0x46>
	
	// Returns the ADC value of the chosen channel
	return ADC;
     148:	84 e2       	ldi	r24, 0x24	; 36
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	fc 01       	movw	r30, r24
     14e:	80 81       	ld	r24, Z
     150:	91 81       	ldd	r25, Z+1	; 0x01
     152:	0f 90       	pop	r0
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <buttons_init>:

/* Libraries */
#include <avr/io.h>

/* Body */
void buttons_init(void){
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
	// Enable interrupt INT1
	
	GICR |= (1 << INT1);
     162:	8b e5       	ldi	r24, 0x5B	; 91
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	2b e5       	ldi	r18, 0x5B	; 91
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	f9 01       	movw	r30, r18
     16c:	20 81       	ld	r18, Z
     16e:	20 68       	ori	r18, 0x80	; 128
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
	// Rising edge of INT1
	MCUCR |= (1 << ISC11) | (1 << ISC10);
     174:	85 e5       	ldi	r24, 0x55	; 85
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	25 e5       	ldi	r18, 0x55	; 85
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	f9 01       	movw	r30, r18
     17e:	20 81       	ld	r18, Z
     180:	2c 60       	ori	r18, 0x0C	; 12
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
}
     186:	00 00       	nop
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <btn_pressed>:

void btn_pressed(){
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
	switch(btn_val){
     196:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <btn_val>
     19a:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <btn_val+0x1>
     19e:	09 2e       	mov	r0, r25
     1a0:	00 0c       	add	r0, r0
     1a2:	aa 0b       	sbc	r26, r26
     1a4:	bb 0b       	sbc	r27, r27
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	2c e0       	ldi	r18, 0x0C	; 12
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	84 1b       	sub	r24, r20
     1b0:	95 0b       	sbc	r25, r21
     1b2:	28 17       	cp	r18, r24
     1b4:	39 07       	cpc	r19, r25
     1b6:	30 f1       	brcs	.+76     	; 0x204 <btn_pressed+0x76>
     1b8:	86 5d       	subi	r24, 0xD6	; 214
     1ba:	9f 4f       	sbci	r25, 0xFF	; 255
     1bc:	fc 01       	movw	r30, r24
     1be:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__tablejump2__>
		case BTN_11:
		start_display();
     1c2:	43 d3       	rcall	.+1670   	; 0x84a <start_display>
		break;
     1c4:	23 c0       	rjmp	.+70     	; 0x20c <btn_pressed+0x7e>
		case BTN_12:
		set_time_param();
     1c6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_time_param>
		break;
     1ca:	20 c0       	rjmp	.+64     	; 0x20c <btn_pressed+0x7e>
		case BTN_13:
		increment_time_param();
     1cc:	0e 94 7e 11 	call	0x22fc	; 0x22fc <increment_time_param>
		break;
     1d0:	1d c0       	rjmp	.+58     	; 0x20c <btn_pressed+0x7e>
		case BTN_14:
		decrement_time_param();
     1d2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <decrement_time_param>
		break;
     1d6:	1a c0       	rjmp	.+52     	; 0x20c <btn_pressed+0x7e>
		case BTN_21:
		display_temperature();
     1d8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <display_temperature>
		break;
     1dc:	17 c0       	rjmp	.+46     	; 0x20c <btn_pressed+0x7e>
		case BTN_22:
		display_humidity();
     1de:	0e 94 1f 0b 	call	0x163e	; 0x163e <display_humidity>
		break;
     1e2:	14 c0       	rjmp	.+40     	; 0x20c <btn_pressed+0x7e>
		case BTN_23:
		display_brightness();
     1e4:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <display_brightness>
		break;
		case BTN_31:
		display_clothing();
     1e8:	11 c0       	rjmp	.+34     	; 0x20c <btn_pressed+0x7e>
     1ea:	14 d0       	rcall	.+40     	; 0x214 <display_clothing>
		break;
     1ec:	0f c0       	rjmp	.+30     	; 0x20c <btn_pressed+0x7e>
		case BTN_32:
		display_warning();
     1ee:	0e 94 94 0c 	call	0x1928	; 0x1928 <display_warning>
		break;
     1f2:	0c c0       	rjmp	.+24     	; 0x20c <btn_pressed+0x7e>
		case BTN_33:
		set_clock();
     1f4:	0e 94 04 14 	call	0x2808	; 0x2808 <set_clock>
		break;
     1f8:	09 c0       	rjmp	.+18     	; 0x20c <btn_pressed+0x7e>
		case BTN_34:
		display_time();
     1fa:	0e 94 85 13 	call	0x270a	; 0x270a <display_time>
		break;
		case BTN_44:
		clear_data();
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <btn_pressed+0x7e>
		break;
     200:	c3 d6       	rcall	.+3462   	; 0xf88 <clear_data>
		default:
		clear_display();
     202:	04 c0       	rjmp	.+8      	; 0x20c <btn_pressed+0x7e>
		write_str_display("Wrong button!");
     204:	86 d2       	rcall	.+1292   	; 0x712 <clear_display>
     206:	80 e6       	ldi	r24, 0x60	; 96
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	59 d5       	rcall	.+2738   	; 0xcbe <write_str_display>
	}
     20c:	00 00       	nop
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <display_clothing>:
/* Header Files Post Libraries */
#include "sensor.h"
#include "clothing.h"

/* Body */
void display_clothing(){
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	6c 97       	sbiw	r28, 0x1c	; 28
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	de bf       	out	0x3e, r29	; 62
     224:	0f be       	out	0x3f, r0	; 63
     226:	cd bf       	out	0x3d, r28	; 61
	clear_display();
     228:	74 d2       	rcall	.+1256   	; 0x712 <clear_display>
	
	read_temperature();
     22a:	91 d7       	rcall	.+3874   	; 0x114e <read_temperature>
	read_humidity();
     22c:	d2 d7       	rcall	.+4004   	; 0x11d2 <read_humidity>
	read_brightness();
     22e:	0e 94 35 09 	call	0x126a	; 0x126a <read_brightness>
	
	calculate_clothing_top();
     232:	07 d1       	rcall	.+526    	; 0x442 <calculate_clothing_top>
	calculate_clothing_middle();
     234:	3a d1       	rcall	.+628    	; 0x4aa <calculate_clothing_middle>
	calculate_clothing_bottom();
     236:	6c d1       	rcall	.+728    	; 0x510 <calculate_clothing_bottom>
     238:	8e e6       	ldi	r24, 0x6E	; 110
	
	write_str_display("Top:");
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	40 d5       	rcall	.+2688   	; 0xcbe <write_str_display>
     23e:	fb d2       	rcall	.+1526   	; 0x836 <display_line_bottom>
	display_line_bottom();
     240:	8c e0       	ldi	r24, 0x0C	; 12
     242:	93 e0       	ldi	r25, 0x03	; 3
	write_str_display(clothing_top);
     244:	3c d5       	rcall	.+2680   	; 0xcbe <write_str_display>
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e8       	ldi	r25, 0x80	; 128
     24a:	ab e3       	ldi	r26, 0x3B	; 59
     24c:	b5 e4       	ldi	r27, 0x45	; 69
     24e:	89 83       	std	Y+1, r24	; 0x01
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	ab 83       	std	Y+3, r26	; 0x03
     254:	bc 83       	std	Y+4, r27	; 0x04
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	4a ef       	ldi	r20, 0xFA	; 250

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     25c:	54 e4       	ldi	r21, 0x44	; 68
     25e:	69 81       	ldd	r22, Y+1	; 0x01
     260:	7a 81       	ldd	r23, Y+2	; 0x02
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	9c 81       	ldd	r25, Y+4	; 0x04
     266:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     26a:	dc 01       	movw	r26, r24
     26c:	cb 01       	movw	r24, r22
     26e:	8b 8b       	std	Y+19, r24	; 0x13
     270:	9c 8b       	std	Y+20, r25	; 0x14
     272:	ad 8b       	std	Y+21, r26	; 0x15
     274:	be 8b       	std	Y+22, r27	; 0x16
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
     27c:	5f e3       	ldi	r21, 0x3F	; 63
     27e:	6b 89       	ldd	r22, Y+19	; 0x13
     280:	7c 89       	ldd	r23, Y+20	; 0x14
     282:	8d 89       	ldd	r24, Y+21	; 0x15
     284:	9e 89       	ldd	r25, Y+22	; 0x16
     286:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
     28a:	88 23       	and	r24, r24
     28c:	2c f4       	brge	.+10     	; 0x298 <display_clothing+0x84>
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
     294:	8f 8b       	std	Y+23, r24	; 0x17
     296:	3f c0       	rjmp	.+126    	; 0x316 <display_clothing+0x102>
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	3f ef       	ldi	r19, 0xFF	; 255
     29c:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
     29e:	57 e4       	ldi	r21, 0x47	; 71
     2a0:	6b 89       	ldd	r22, Y+19	; 0x13
     2a2:	7c 89       	ldd	r23, Y+20	; 0x14
     2a4:	8d 89       	ldd	r24, Y+21	; 0x15
     2a6:	9e 89       	ldd	r25, Y+22	; 0x16
     2a8:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     2ac:	18 16       	cp	r1, r24
     2ae:	4c f5       	brge	.+82     	; 0x302 <display_clothing+0xee>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2b6:	51 e4       	ldi	r21, 0x41	; 65
     2b8:	69 81       	ldd	r22, Y+1	; 0x01
     2ba:	7a 81       	ldd	r23, Y+2	; 0x02
     2bc:	8b 81       	ldd	r24, Y+3	; 0x03
     2be:	9c 81       	ldd	r25, Y+4	; 0x04
     2c0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	bc 01       	movw	r22, r24
     2ca:	cd 01       	movw	r24, r26
     2cc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     2d0:	dc 01       	movw	r26, r24
     2d2:	cb 01       	movw	r24, r22
     2d4:	98 8f       	std	Y+24, r25	; 0x18
     2d6:	8f 8b       	std	Y+23, r24	; 0x17
     2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <display_clothing+0xe4>
     2da:	88 ec       	ldi	r24, 0xC8	; 200
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	9a 8f       	std	Y+26, r25	; 0x1a
     2e0:	89 8f       	std	Y+25, r24	; 0x19
     2e2:	89 8d       	ldd	r24, Y+25	; 0x19
     2e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2e6:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <display_clothing+0xd2>
     2ea:	9a 8f       	std	Y+26, r25	; 0x1a
     2ec:	89 8f       	std	Y+25, r24	; 0x19
     2ee:	8f 89       	ldd	r24, Y+23	; 0x17
     2f0:	98 8d       	ldd	r25, Y+24	; 0x18
     2f2:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2f4:	98 8f       	std	Y+24, r25	; 0x18
     2f6:	8f 8b       	std	Y+23, r24	; 0x17
     2f8:	8f 89       	ldd	r24, Y+23	; 0x17
     2fa:	98 8d       	ldd	r25, Y+24	; 0x18
     2fc:	89 2b       	or	r24, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2fe:	69 f7       	brne	.-38     	; 0x2da <display_clothing+0xc6>
     300:	14 c0       	rjmp	.+40     	; 0x32a <display_clothing+0x116>
     302:	6b 89       	ldd	r22, Y+19	; 0x13
     304:	7c 89       	ldd	r23, Y+20	; 0x14
     306:	8d 89       	ldd	r24, Y+21	; 0x15
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     308:	9e 89       	ldd	r25, Y+22	; 0x16
     30a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	98 8f       	std	Y+24, r25	; 0x18
     314:	8f 8b       	std	Y+23, r24	; 0x17
     316:	8f 89       	ldd	r24, Y+23	; 0x17
     318:	98 8d       	ldd	r25, Y+24	; 0x18
     31a:	9c 8f       	std	Y+28, r25	; 0x1c
     31c:	8b 8f       	std	Y+27, r24	; 0x1b
     31e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     320:	9c 8d       	ldd	r25, Y+28	; 0x1c
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <display_clothing+0x10e>
     326:	9c 8f       	std	Y+28, r25	; 0x1c
     328:	8b 8f       	std	Y+27, r24	; 0x1b
	
	_delay_ms(3000);
	clear_display();
     32a:	f3 d1       	rcall	.+998    	; 0x712 <clear_display>
     32c:	83 e7       	ldi	r24, 0x73	; 115
	
	write_str_display("Middle:");
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	c6 d4       	rcall	.+2444   	; 0xcbe <write_str_display>
     332:	81 d2       	rcall	.+1282   	; 0x836 <display_line_bottom>
     334:	80 e2       	ldi	r24, 0x20	; 32
	display_line_bottom();
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	c2 d4       	rcall	.+2436   	; 0xcbe <write_str_display>
	write_str_display(clothing_middle);
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e8       	ldi	r25, 0x80	; 128
     33e:	ab e3       	ldi	r26, 0x3B	; 59
     340:	b5 e4       	ldi	r27, 0x45	; 69
     342:	8d 83       	std	Y+5, r24	; 0x05
     344:	9e 83       	std	Y+6, r25	; 0x06
     346:	af 83       	std	Y+7, r26	; 0x07
     348:	b8 87       	std	Y+8, r27	; 0x08
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	4a ef       	ldi	r20, 0xFA	; 250
     350:	54 e4       	ldi	r21, 0x44	; 68

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     352:	6d 81       	ldd	r22, Y+5	; 0x05
     354:	7e 81       	ldd	r23, Y+6	; 0x06
     356:	8f 81       	ldd	r24, Y+7	; 0x07
     358:	98 85       	ldd	r25, Y+8	; 0x08
     35a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     35e:	dc 01       	movw	r26, r24
     360:	cb 01       	movw	r24, r22
     362:	89 87       	std	Y+9, r24	; 0x09
     364:	9a 87       	std	Y+10, r25	; 0x0a
     366:	ab 87       	std	Y+11, r26	; 0x0b
     368:	bc 87       	std	Y+12, r27	; 0x0c
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	40 e8       	ldi	r20, 0x80	; 128
     370:	5f e3       	ldi	r21, 0x3F	; 63
	if (__tmp < 1.0)
     372:	69 85       	ldd	r22, Y+9	; 0x09
     374:	7a 85       	ldd	r23, Y+10	; 0x0a
     376:	8b 85       	ldd	r24, Y+11	; 0x0b
     378:	9c 85       	ldd	r25, Y+12	; 0x0c
     37a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
     37e:	88 23       	and	r24, r24
     380:	2c f4       	brge	.+10     	; 0x38c <display_clothing+0x178>
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	9e 87       	std	Y+14, r25	; 0x0e
     388:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
     38a:	3f c0       	rjmp	.+126    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	3f ef       	ldi	r19, 0xFF	; 255
     390:	4f e7       	ldi	r20, 0x7F	; 127
     392:	57 e4       	ldi	r21, 0x47	; 71
	else if (__tmp > 65535)
     394:	69 85       	ldd	r22, Y+9	; 0x09
     396:	7a 85       	ldd	r23, Y+10	; 0x0a
     398:	8b 85       	ldd	r24, Y+11	; 0x0b
     39a:	9c 85       	ldd	r25, Y+12	; 0x0c
     39c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     3a0:	18 16       	cp	r1, r24
     3a2:	4c f5       	brge	.+82     	; 0x3f6 <display_clothing+0x1e2>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e2       	ldi	r20, 0x20	; 32
     3aa:	51 e4       	ldi	r21, 0x41	; 65
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ac:	6d 81       	ldd	r22, Y+5	; 0x05
     3ae:	7e 81       	ldd	r23, Y+6	; 0x06
     3b0:	8f 81       	ldd	r24, Y+7	; 0x07
     3b2:	98 85       	ldd	r25, Y+8	; 0x08
     3b4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	bc 01       	movw	r22, r24
     3be:	cd 01       	movw	r24, r26
     3c0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	9e 87       	std	Y+14, r25	; 0x0e
     3ca:	8d 87       	std	Y+13, r24	; 0x0d
     3cc:	0f c0       	rjmp	.+30     	; 0x3ec <display_clothing+0x1d8>
     3ce:	88 ec       	ldi	r24, 0xC8	; 200
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	98 8b       	std	Y+16, r25	; 0x10
     3d4:	8f 87       	std	Y+15, r24	; 0x0f
     3d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     3d8:	98 89       	ldd	r25, Y+16	; 0x10
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <display_clothing+0x1c6>
     3de:	98 8b       	std	Y+16, r25	; 0x10
     3e0:	8f 87       	std	Y+15, r24	; 0x0f
     3e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     3e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	9e 87       	std	Y+14, r25	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ea:	8d 87       	std	Y+13, r24	; 0x0d
     3ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     3ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     3f0:	89 2b       	or	r24, r25
     3f2:	69 f7       	brne	.-38     	; 0x3ce <display_clothing+0x1ba>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3f4:	14 c0       	rjmp	.+40     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3f6:	69 85       	ldd	r22, Y+9	; 0x09
     3f8:	7a 85       	ldd	r23, Y+10	; 0x0a
     3fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     3fc:	9c 85       	ldd	r25, Y+12	; 0x0c
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3fe:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	9e 87       	std	Y+14, r25	; 0x0e
     408:	8d 87       	std	Y+13, r24	; 0x0d
     40a:	8d 85       	ldd	r24, Y+13	; 0x0d
     40c:	9e 85       	ldd	r25, Y+14	; 0x0e
     40e:	9a 8b       	std	Y+18, r25	; 0x12
     410:	89 8b       	std	Y+17, r24	; 0x11
     412:	89 89       	ldd	r24, Y+17	; 0x11
     414:	9a 89       	ldd	r25, Y+18	; 0x12
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41a:	9a 8b       	std	Y+18, r25	; 0x12
     41c:	89 8b       	std	Y+17, r24	; 0x11
	
	_delay_ms(3000);
	clear_display();
     41e:	79 d1       	rcall	.+754    	; 0x712 <clear_display>
     420:	8b e7       	ldi	r24, 0x7B	; 123
	
	write_str_display("Bottom:");
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	4c d4       	rcall	.+2200   	; 0xcbe <write_str_display>
     426:	07 d2       	rcall	.+1038   	; 0x836 <display_line_bottom>
     428:	80 e5       	ldi	r24, 0x50	; 80
	display_line_bottom();
     42a:	93 e0       	ldi	r25, 0x03	; 3
     42c:	48 d4       	rcall	.+2192   	; 0xcbe <write_str_display>
	write_str_display(clothing_bottom);
     42e:	00 00       	nop
     430:	6c 96       	adiw	r28, 0x1c	; 28
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
	
}
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <calculate_clothing_top>:
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62

void calculate_clothing_top(){
	if(sensor_temperature < 10){
     44a:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <sensor_temperature>
     44e:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <sensor_temperature+0x1>
     452:	0a 97       	sbiw	r24, 0x0a	; 10
     454:	4c f4       	brge	.+18     	; 0x468 <__stack+0x9>
		strncpy ( clothing_top, "Beanie", sizeof(clothing_top) );
     456:	44 e1       	ldi	r20, 0x14	; 20
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	63 e8       	ldi	r22, 0x83	; 131
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	8c e0       	ldi	r24, 0x0C	; 12
     460:	93 e0       	ldi	r25, 0x03	; 3
     462:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strncpy>
		return;
     466:	1e c0       	rjmp	.+60     	; 0x4a4 <__stack+0x45>
	}
	
	if(sensor_temperature >= 10 && sensor_brightness > 4000){
     468:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <sensor_temperature>
     46c:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <sensor_temperature+0x1>
     470:	0a 97       	sbiw	r24, 0x0a	; 10
     472:	84 f0       	brlt	.+32     	; 0x494 <__stack+0x35>
     474:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <sensor_brightness>
     478:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <sensor_brightness+0x1>
     47c:	81 3a       	cpi	r24, 0xA1	; 161
     47e:	9f 40       	sbci	r25, 0x0F	; 15
     480:	4c f0       	brlt	.+18     	; 0x494 <__stack+0x35>
		strncpy ( clothing_top, "Sun Hat", sizeof(clothing_top) );
     482:	44 e1       	ldi	r20, 0x14	; 20
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	6a e8       	ldi	r22, 0x8A	; 138
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	8c e0       	ldi	r24, 0x0C	; 12
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strncpy>
		return;
     492:	08 c0       	rjmp	.+16     	; 0x4a4 <__stack+0x45>
	}
	
	strncpy ( clothing_top, "Cap", sizeof(clothing_top) );
     494:	44 e1       	ldi	r20, 0x14	; 20
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	62 e9       	ldi	r22, 0x92	; 146
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	8c e0       	ldi	r24, 0x0C	; 12
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strncpy>
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <calculate_clothing_middle>:

void calculate_clothing_middle(){
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
	if(sensor_temperature < 15){
     4b2:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <sensor_temperature>
     4b6:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <sensor_temperature+0x1>
     4ba:	0f 97       	sbiw	r24, 0x0f	; 15
     4bc:	4c f4       	brge	.+18     	; 0x4d0 <calculate_clothing_middle+0x26>
		strncpy ( clothing_middle, "Jacket", sizeof(clothing_middle) );
     4be:	44 e1       	ldi	r20, 0x14	; 20
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	66 e9       	ldi	r22, 0x96	; 150
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	80 e2       	ldi	r24, 0x20	; 32
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strncpy>
		return;
     4ce:	1d c0       	rjmp	.+58     	; 0x50a <calculate_clothing_middle+0x60>
	}
	
	if(sensor_temperature >= 15 && sensor_humidity > 50){
     4d0:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <sensor_temperature>
     4d4:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <sensor_temperature+0x1>
     4d8:	0f 97       	sbiw	r24, 0x0f	; 15
     4da:	7c f0       	brlt	.+30     	; 0x4fa <calculate_clothing_middle+0x50>
     4dc:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <sensor_humidity>
     4e0:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <sensor_humidity+0x1>
     4e4:	c3 97       	sbiw	r24, 0x33	; 51
     4e6:	4c f0       	brlt	.+18     	; 0x4fa <calculate_clothing_middle+0x50>
		strncpy ( clothing_middle, "T-shirt", sizeof(clothing_middle) );
     4e8:	44 e1       	ldi	r20, 0x14	; 20
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	6d e9       	ldi	r22, 0x9D	; 157
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	80 e2       	ldi	r24, 0x20	; 32
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strncpy>
		return;
     4f8:	08 c0       	rjmp	.+16     	; 0x50a <calculate_clothing_middle+0x60>
	}
	
	strncpy ( clothing_middle, "Cardigan", sizeof(clothing_middle) );
     4fa:	44 e1       	ldi	r20, 0x14	; 20
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	65 ea       	ldi	r22, 0xA5	; 165
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	80 e2       	ldi	r24, 0x20	; 32
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strncpy>
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <calculate_clothing_bottom>:

void calculate_clothing_bottom(){
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
	if(sensor_temperature >= 10 && sensor_brightness > 4000){
     518:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <sensor_temperature>
     51c:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <sensor_temperature+0x1>
     520:	0a 97       	sbiw	r24, 0x0a	; 10
     522:	84 f0       	brlt	.+32     	; 0x544 <calculate_clothing_bottom+0x34>
     524:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <sensor_brightness>
     528:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <sensor_brightness+0x1>
     52c:	81 3a       	cpi	r24, 0xA1	; 161
     52e:	9f 40       	sbci	r25, 0x0F	; 15
     530:	4c f0       	brlt	.+18     	; 0x544 <calculate_clothing_bottom+0x34>
		strncpy ( clothing_bottom, "Shorts", sizeof(clothing_bottom) );
     532:	44 e1       	ldi	r20, 0x14	; 20
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	6e ea       	ldi	r22, 0xAE	; 174
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	80 e5       	ldi	r24, 0x50	; 80
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strncpy>
		return;
     542:	08 c0       	rjmp	.+16     	; 0x554 <calculate_clothing_bottom+0x44>
	}
	
	strncpy ( clothing_bottom, "Pants", sizeof(clothing_bottom) );
     544:	44 e1       	ldi	r20, 0x14	; 20
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	65 eb       	ldi	r22, 0xB5	; 181
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	80 e5       	ldi	r24, 0x50	; 80
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strncpy>
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <diod_active>:

/* Header Files Post Libraries */
#include "diod.h"

/* Body */
void diod_active(){
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	PORTC ^= (1 << LED_RED);
     562:	85 e3       	ldi	r24, 0x35	; 53
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	25 e3       	ldi	r18, 0x35	; 53
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	f9 01       	movw	r30, r18
     56c:	30 81       	ld	r19, Z
     56e:	20 e8       	ldi	r18, 0x80	; 128
     570:	23 27       	eor	r18, r19
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
}
     576:	00 00       	nop
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <diod_reset>:

void diod_reset(){
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~(1 << LED_RED);
     586:	85 e3       	ldi	r24, 0x35	; 53
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	25 e3       	ldi	r18, 0x35	; 53
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	f9 01       	movw	r30, r18
     590:	20 81       	ld	r18, Z
     592:	2f 77       	andi	r18, 0x7F	; 127
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
     598:	00 00       	nop
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <set_command>:

/* Header Files Post Libraries */
#include "display.h"

/* Body */
void set_command(char c) {
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	2f 97       	sbiw	r28, 0x0f	; 15
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	8f 87       	std	Y+15, r24	; 0x0f
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	a8 ec       	ldi	r26, 0xC8	; 200
     5bc:	b2 e4       	ldi	r27, 0x42	; 66
     5be:	89 83       	std	Y+1, r24	; 0x01
     5c0:	9a 83       	std	Y+2, r25	; 0x02
     5c2:	ab 83       	std	Y+3, r26	; 0x03
     5c4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	4a ef       	ldi	r20, 0xFA	; 250
     5cc:	54 e4       	ldi	r21, 0x44	; 68
     5ce:	69 81       	ldd	r22, Y+1	; 0x01
     5d0:	7a 81       	ldd	r23, Y+2	; 0x02
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     5da:	dc 01       	movw	r26, r24
     5dc:	cb 01       	movw	r24, r22
     5de:	8d 83       	std	Y+5, r24	; 0x05
     5e0:	9e 83       	std	Y+6, r25	; 0x06
     5e2:	af 83       	std	Y+7, r26	; 0x07
     5e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e8       	ldi	r20, 0x80	; 128
     5ec:	5f e3       	ldi	r21, 0x3F	; 63
     5ee:	6d 81       	ldd	r22, Y+5	; 0x05
     5f0:	7e 81       	ldd	r23, Y+6	; 0x06
     5f2:	8f 81       	ldd	r24, Y+7	; 0x07
     5f4:	98 85       	ldd	r25, Y+8	; 0x08
     5f6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
     5fa:	88 23       	and	r24, r24
     5fc:	2c f4       	brge	.+10     	; 0x608 <set_command+0x68>
		__ticks = 1;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	9a 87       	std	Y+10, r25	; 0x0a
     604:	89 87       	std	Y+9, r24	; 0x09
     606:	3f c0       	rjmp	.+126    	; 0x686 <set_command+0xe6>
	else if (__tmp > 65535)
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	3f ef       	ldi	r19, 0xFF	; 255
     60c:	4f e7       	ldi	r20, 0x7F	; 127
     60e:	57 e4       	ldi	r21, 0x47	; 71
     610:	6d 81       	ldd	r22, Y+5	; 0x05
     612:	7e 81       	ldd	r23, Y+6	; 0x06
     614:	8f 81       	ldd	r24, Y+7	; 0x07
     616:	98 85       	ldd	r25, Y+8	; 0x08
     618:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     61c:	18 16       	cp	r1, r24
     61e:	4c f5       	brge	.+82     	; 0x672 <set_command+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 e2       	ldi	r20, 0x20	; 32
     626:	51 e4       	ldi	r21, 0x41	; 65
     628:	69 81       	ldd	r22, Y+1	; 0x01
     62a:	7a 81       	ldd	r23, Y+2	; 0x02
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	9c 81       	ldd	r25, Y+4	; 0x04
     630:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	bc 01       	movw	r22, r24
     63a:	cd 01       	movw	r24, r26
     63c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	9a 87       	std	Y+10, r25	; 0x0a
     646:	89 87       	std	Y+9, r24	; 0x09
     648:	0f c0       	rjmp	.+30     	; 0x668 <set_command+0xc8>
     64a:	88 ec       	ldi	r24, 0xC8	; 200
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	9c 87       	std	Y+12, r25	; 0x0c
     650:	8b 87       	std	Y+11, r24	; 0x0b
     652:	8b 85       	ldd	r24, Y+11	; 0x0b
     654:	9c 85       	ldd	r25, Y+12	; 0x0c
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <set_command+0xb6>
     65a:	9c 87       	std	Y+12, r25	; 0x0c
     65c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     65e:	89 85       	ldd	r24, Y+9	; 0x09
     660:	9a 85       	ldd	r25, Y+10	; 0x0a
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	9a 87       	std	Y+10, r25	; 0x0a
     666:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     668:	89 85       	ldd	r24, Y+9	; 0x09
     66a:	9a 85       	ldd	r25, Y+10	; 0x0a
     66c:	89 2b       	or	r24, r25
     66e:	69 f7       	brne	.-38     	; 0x64a <set_command+0xaa>
     670:	14 c0       	rjmp	.+40     	; 0x69a <set_command+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     672:	6d 81       	ldd	r22, Y+5	; 0x05
     674:	7e 81       	ldd	r23, Y+6	; 0x06
     676:	8f 81       	ldd	r24, Y+7	; 0x07
     678:	98 85       	ldd	r25, Y+8	; 0x08
     67a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	9a 87       	std	Y+10, r25	; 0x0a
     684:	89 87       	std	Y+9, r24	; 0x09
     686:	89 85       	ldd	r24, Y+9	; 0x09
     688:	9a 85       	ldd	r25, Y+10	; 0x0a
     68a:	9e 87       	std	Y+14, r25	; 0x0e
     68c:	8d 87       	std	Y+13, r24	; 0x0d
     68e:	8d 85       	ldd	r24, Y+13	; 0x0d
     690:	9e 85       	ldd	r25, Y+14	; 0x0e
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <set_command+0xf2>
     696:	9e 87       	std	Y+14, r25	; 0x0e
     698:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);
	
	PORTB = c;
     69a:	88 e3       	ldi	r24, 0x38	; 56
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	2f 85       	ldd	r18, Y+15	; 0x0f
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
	PORTD |= DISPLAY_E;
     6a4:	82 e3       	ldi	r24, 0x32	; 50
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	22 e3       	ldi	r18, 0x32	; 50
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	f9 01       	movw	r30, r18
     6ae:	20 81       	ld	r18, Z
     6b0:	20 61       	ori	r18, 0x10	; 16
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
	PORTD &= ~DISPLAY_RS;
     6b6:	82 e3       	ldi	r24, 0x32	; 50
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	22 e3       	ldi	r18, 0x32	; 50
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	2e 7f       	andi	r18, 0xFE	; 254
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
	PORTD &= ~DISPLAY_RW;
     6c8:	82 e3       	ldi	r24, 0x32	; 50
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	22 e3       	ldi	r18, 0x32	; 50
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	f9 01       	movw	r30, r18
     6d2:	20 81       	ld	r18, Z
     6d4:	2d 7f       	andi	r18, 0xFD	; 253
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 83       	st	Z, r18
	PORTD &= ~DISPLAY_E;
     6da:	82 e3       	ldi	r24, 0x32	; 50
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	22 e3       	ldi	r18, 0x32	; 50
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	f9 01       	movw	r30, r18
     6e4:	20 81       	ld	r18, Z
     6e6:	2f 7e       	andi	r18, 0xEF	; 239
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
	PORTD |= DISPLAY_E;
     6ec:	82 e3       	ldi	r24, 0x32	; 50
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	22 e3       	ldi	r18, 0x32	; 50
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	f9 01       	movw	r30, r18
     6f6:	20 81       	ld	r18, Z
     6f8:	20 61       	ori	r18, 0x10	; 16
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
}
     6fe:	00 00       	nop
     700:	2f 96       	adiw	r28, 0x0f	; 15
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <clear_display>:

void clear_display(){
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	2e 97       	sbiw	r28, 0x0e	; 14
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
	set_command(0x01);
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	3b df       	rcall	.-394    	; 0x5a0 <set_command>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	a0 e2       	ldi	r26, 0x20	; 32
     730:	b1 e4       	ldi	r27, 0x41	; 65
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	ab 83       	std	Y+3, r26	; 0x03
     738:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4a ef       	ldi	r20, 0xFA	; 250
     740:	54 e4       	ldi	r21, 0x44	; 68
     742:	69 81       	ldd	r22, Y+1	; 0x01
     744:	7a 81       	ldd	r23, Y+2	; 0x02
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	8d 83       	std	Y+5, r24	; 0x05
     754:	9e 83       	std	Y+6, r25	; 0x06
     756:	af 83       	std	Y+7, r26	; 0x07
     758:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 e8       	ldi	r20, 0x80	; 128
     760:	5f e3       	ldi	r21, 0x3F	; 63
     762:	6d 81       	ldd	r22, Y+5	; 0x05
     764:	7e 81       	ldd	r23, Y+6	; 0x06
     766:	8f 81       	ldd	r24, Y+7	; 0x07
     768:	98 85       	ldd	r25, Y+8	; 0x08
     76a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
     76e:	88 23       	and	r24, r24
     770:	2c f4       	brge	.+10     	; 0x77c <clear_display+0x6a>
		__ticks = 1;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	9a 87       	std	Y+10, r25	; 0x0a
     778:	89 87       	std	Y+9, r24	; 0x09
     77a:	3f c0       	rjmp	.+126    	; 0x7fa <clear_display+0xe8>
	else if (__tmp > 65535)
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	3f ef       	ldi	r19, 0xFF	; 255
     780:	4f e7       	ldi	r20, 0x7F	; 127
     782:	57 e4       	ldi	r21, 0x47	; 71
     784:	6d 81       	ldd	r22, Y+5	; 0x05
     786:	7e 81       	ldd	r23, Y+6	; 0x06
     788:	8f 81       	ldd	r24, Y+7	; 0x07
     78a:	98 85       	ldd	r25, Y+8	; 0x08
     78c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     790:	18 16       	cp	r1, r24
     792:	4c f5       	brge	.+82     	; 0x7e6 <clear_display+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e2       	ldi	r20, 0x20	; 32
     79a:	51 e4       	ldi	r21, 0x41	; 65
     79c:	69 81       	ldd	r22, Y+1	; 0x01
     79e:	7a 81       	ldd	r23, Y+2	; 0x02
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	9c 81       	ldd	r25, Y+4	; 0x04
     7a4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	bc 01       	movw	r22, r24
     7ae:	cd 01       	movw	r24, r26
     7b0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	9a 87       	std	Y+10, r25	; 0x0a
     7ba:	89 87       	std	Y+9, r24	; 0x09
     7bc:	0f c0       	rjmp	.+30     	; 0x7dc <clear_display+0xca>
     7be:	88 ec       	ldi	r24, 0xC8	; 200
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	9c 87       	std	Y+12, r25	; 0x0c
     7c4:	8b 87       	std	Y+11, r24	; 0x0b
     7c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     7c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <clear_display+0xb8>
     7ce:	9c 87       	std	Y+12, r25	; 0x0c
     7d0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d2:	89 85       	ldd	r24, Y+9	; 0x09
     7d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	9a 87       	std	Y+10, r25	; 0x0a
     7da:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7dc:	89 85       	ldd	r24, Y+9	; 0x09
     7de:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e0:	89 2b       	or	r24, r25
     7e2:	69 f7       	brne	.-38     	; 0x7be <clear_display+0xac>
	_delay_ms(10);
}
     7e4:	14 c0       	rjmp	.+40     	; 0x80e <clear_display+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7e6:	6d 81       	ldd	r22, Y+5	; 0x05
     7e8:	7e 81       	ldd	r23, Y+6	; 0x06
     7ea:	8f 81       	ldd	r24, Y+7	; 0x07
     7ec:	98 85       	ldd	r25, Y+8	; 0x08
     7ee:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	9a 87       	std	Y+10, r25	; 0x0a
     7f8:	89 87       	std	Y+9, r24	; 0x09
     7fa:	89 85       	ldd	r24, Y+9	; 0x09
     7fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7fe:	9e 87       	std	Y+14, r25	; 0x0e
     800:	8d 87       	std	Y+13, r24	; 0x0d
     802:	8d 85       	ldd	r24, Y+13	; 0x0d
     804:	9e 85       	ldd	r25, Y+14	; 0x0e
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <clear_display+0xf4>
     80a:	9e 87       	std	Y+14, r25	; 0x0e
     80c:	8d 87       	std	Y+13, r24	; 0x0d
     80e:	00 00       	nop
     810:	2e 96       	adiw	r28, 0x0e	; 14
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <display_line_top>:

void display_line_top(){
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	set_command(0x80);
     82a:	80 e8       	ldi	r24, 0x80	; 128
     82c:	b9 de       	rcall	.-654    	; 0x5a0 <set_command>
}
     82e:	00 00       	nop
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <display_line_bottom>:

void display_line_bottom(){
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
	set_command(0xC0);
     83e:	80 ec       	ldi	r24, 0xC0	; 192
     840:	af de       	rcall	.-674    	; 0x5a0 <set_command>
}
     842:	00 00       	nop
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <start_display>:

void start_display(){
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	6c 97       	sbiw	r28, 0x1c	; 28
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
	set_command(0x3C);
     85e:	8c e3       	ldi	r24, 0x3C	; 60
     860:	9f de       	rcall	.-706    	; 0x5a0 <set_command>
	set_command(0x0F);
     862:	8f e0       	ldi	r24, 0x0F	; 15
     864:	9d de       	rcall	.-710    	; 0x5a0 <set_command>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a0 e2       	ldi	r26, 0x20	; 32
     86c:	b1 e4       	ldi	r27, 0x41	; 65
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	ab 83       	std	Y+3, r26	; 0x03
     874:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	4a ef       	ldi	r20, 0xFA	; 250
     87c:	54 e4       	ldi	r21, 0x44	; 68
     87e:	69 81       	ldd	r22, Y+1	; 0x01
     880:	7a 81       	ldd	r23, Y+2	; 0x02
     882:	8b 81       	ldd	r24, Y+3	; 0x03
     884:	9c 81       	ldd	r25, Y+4	; 0x04
     886:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	8b 8b       	std	Y+19, r24	; 0x13
     890:	9c 8b       	std	Y+20, r25	; 0x14
     892:	ad 8b       	std	Y+21, r26	; 0x15
     894:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	40 e8       	ldi	r20, 0x80	; 128
     89c:	5f e3       	ldi	r21, 0x3F	; 63
     89e:	6b 89       	ldd	r22, Y+19	; 0x13
     8a0:	7c 89       	ldd	r23, Y+20	; 0x14
     8a2:	8d 89       	ldd	r24, Y+21	; 0x15
     8a4:	9e 89       	ldd	r25, Y+22	; 0x16
     8a6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
     8aa:	88 23       	and	r24, r24
     8ac:	2c f4       	brge	.+10     	; 0x8b8 <start_display+0x6e>
		__ticks = 1;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	98 8f       	std	Y+24, r25	; 0x18
     8b4:	8f 8b       	std	Y+23, r24	; 0x17
     8b6:	3f c0       	rjmp	.+126    	; 0x936 <start_display+0xec>
	else if (__tmp > 65535)
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	3f ef       	ldi	r19, 0xFF	; 255
     8bc:	4f e7       	ldi	r20, 0x7F	; 127
     8be:	57 e4       	ldi	r21, 0x47	; 71
     8c0:	6b 89       	ldd	r22, Y+19	; 0x13
     8c2:	7c 89       	ldd	r23, Y+20	; 0x14
     8c4:	8d 89       	ldd	r24, Y+21	; 0x15
     8c6:	9e 89       	ldd	r25, Y+22	; 0x16
     8c8:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	4c f5       	brge	.+82     	; 0x922 <start_display+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e2       	ldi	r20, 0x20	; 32
     8d6:	51 e4       	ldi	r21, 0x41	; 65
     8d8:	69 81       	ldd	r22, Y+1	; 0x01
     8da:	7a 81       	ldd	r23, Y+2	; 0x02
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	9c 81       	ldd	r25, Y+4	; 0x04
     8e0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	bc 01       	movw	r22, r24
     8ea:	cd 01       	movw	r24, r26
     8ec:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	98 8f       	std	Y+24, r25	; 0x18
     8f6:	8f 8b       	std	Y+23, r24	; 0x17
     8f8:	0f c0       	rjmp	.+30     	; 0x918 <start_display+0xce>
     8fa:	88 ec       	ldi	r24, 0xC8	; 200
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	9a 8f       	std	Y+26, r25	; 0x1a
     900:	89 8f       	std	Y+25, r24	; 0x19
     902:	89 8d       	ldd	r24, Y+25	; 0x19
     904:	9a 8d       	ldd	r25, Y+26	; 0x1a
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <start_display+0xbc>
     90a:	9a 8f       	std	Y+26, r25	; 0x1a
     90c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     90e:	8f 89       	ldd	r24, Y+23	; 0x17
     910:	98 8d       	ldd	r25, Y+24	; 0x18
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	98 8f       	std	Y+24, r25	; 0x18
     916:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     918:	8f 89       	ldd	r24, Y+23	; 0x17
     91a:	98 8d       	ldd	r25, Y+24	; 0x18
     91c:	89 2b       	or	r24, r25
     91e:	69 f7       	brne	.-38     	; 0x8fa <start_display+0xb0>
     920:	14 c0       	rjmp	.+40     	; 0x94a <start_display+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     922:	6b 89       	ldd	r22, Y+19	; 0x13
     924:	7c 89       	ldd	r23, Y+20	; 0x14
     926:	8d 89       	ldd	r24, Y+21	; 0x15
     928:	9e 89       	ldd	r25, Y+22	; 0x16
     92a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	98 8f       	std	Y+24, r25	; 0x18
     934:	8f 8b       	std	Y+23, r24	; 0x17
     936:	8f 89       	ldd	r24, Y+23	; 0x17
     938:	98 8d       	ldd	r25, Y+24	; 0x18
     93a:	9c 8f       	std	Y+28, r25	; 0x1c
     93c:	8b 8f       	std	Y+27, r24	; 0x1b
     93e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     940:	9c 8d       	ldd	r25, Y+28	; 0x1c
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <start_display+0xf8>
     946:	9c 8f       	std	Y+28, r25	; 0x1c
	
	_delay_ms(10);
	clear_display();
     948:	8b 8f       	std	Y+27, r24	; 0x1b
     94a:	e3 de       	rcall	.-570    	; 0x712 <clear_display>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a0 e2       	ldi	r26, 0x20	; 32
     952:	b1 e4       	ldi	r27, 0x41	; 65
     954:	8d 83       	std	Y+5, r24	; 0x05
     956:	9e 83       	std	Y+6, r25	; 0x06
     958:	af 83       	std	Y+7, r26	; 0x07
     95a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	4a ef       	ldi	r20, 0xFA	; 250
     962:	54 e4       	ldi	r21, 0x44	; 68
     964:	6d 81       	ldd	r22, Y+5	; 0x05
     966:	7e 81       	ldd	r23, Y+6	; 0x06
     968:	8f 81       	ldd	r24, Y+7	; 0x07
     96a:	98 85       	ldd	r25, Y+8	; 0x08
     96c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     970:	dc 01       	movw	r26, r24
     972:	cb 01       	movw	r24, r22
     974:	89 87       	std	Y+9, r24	; 0x09
     976:	9a 87       	std	Y+10, r25	; 0x0a
     978:	ab 87       	std	Y+11, r26	; 0x0b
     97a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e8       	ldi	r20, 0x80	; 128
     982:	5f e3       	ldi	r21, 0x3F	; 63
     984:	69 85       	ldd	r22, Y+9	; 0x09
     986:	7a 85       	ldd	r23, Y+10	; 0x0a
     988:	8b 85       	ldd	r24, Y+11	; 0x0b
     98a:	9c 85       	ldd	r25, Y+12	; 0x0c
     98c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
     990:	88 23       	and	r24, r24
     992:	2c f4       	brge	.+10     	; 0x99e <start_display+0x154>
		__ticks = 1;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	9e 87       	std	Y+14, r25	; 0x0e
     99a:	8d 87       	std	Y+13, r24	; 0x0d
     99c:	3f c0       	rjmp	.+126    	; 0xa1c <start_display+0x1d2>
	else if (__tmp > 65535)
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	3f ef       	ldi	r19, 0xFF	; 255
     9a2:	4f e7       	ldi	r20, 0x7F	; 127
     9a4:	57 e4       	ldi	r21, 0x47	; 71
     9a6:	69 85       	ldd	r22, Y+9	; 0x09
     9a8:	7a 85       	ldd	r23, Y+10	; 0x0a
     9aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ac:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ae:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     9b2:	18 16       	cp	r1, r24
     9b4:	4c f5       	brge	.+82     	; 0xa08 <start_display+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e2       	ldi	r20, 0x20	; 32
     9bc:	51 e4       	ldi	r21, 0x41	; 65
     9be:	6d 81       	ldd	r22, Y+5	; 0x05
     9c0:	7e 81       	ldd	r23, Y+6	; 0x06
     9c2:	8f 81       	ldd	r24, Y+7	; 0x07
     9c4:	98 85       	ldd	r25, Y+8	; 0x08
     9c6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     9ca:	dc 01       	movw	r26, r24
     9cc:	cb 01       	movw	r24, r22
     9ce:	bc 01       	movw	r22, r24
     9d0:	cd 01       	movw	r24, r26
     9d2:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	9e 87       	std	Y+14, r25	; 0x0e
     9dc:	8d 87       	std	Y+13, r24	; 0x0d
     9de:	0f c0       	rjmp	.+30     	; 0x9fe <start_display+0x1b4>
     9e0:	88 ec       	ldi	r24, 0xC8	; 200
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	98 8b       	std	Y+16, r25	; 0x10
     9e6:	8f 87       	std	Y+15, r24	; 0x0f
     9e8:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ea:	98 89       	ldd	r25, Y+16	; 0x10
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <start_display+0x1a2>
     9f0:	98 8b       	std	Y+16, r25	; 0x10
     9f2:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     9f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	9e 87       	std	Y+14, r25	; 0x0e
     9fc:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     a00:	9e 85       	ldd	r25, Y+14	; 0x0e
     a02:	89 2b       	or	r24, r25
     a04:	69 f7       	brne	.-38     	; 0x9e0 <start_display+0x196>
     a06:	14 c0       	rjmp	.+40     	; 0xa30 <start_display+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a08:	69 85       	ldd	r22, Y+9	; 0x09
     a0a:	7a 85       	ldd	r23, Y+10	; 0x0a
     a0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a10:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	9e 87       	std	Y+14, r25	; 0x0e
     a1a:	8d 87       	std	Y+13, r24	; 0x0d
     a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a20:	9a 8b       	std	Y+18, r25	; 0x12
     a22:	89 8b       	std	Y+17, r24	; 0x11
     a24:	89 89       	ldd	r24, Y+17	; 0x11
     a26:	9a 89       	ldd	r25, Y+18	; 0x12
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <start_display+0x1de>
     a2c:	9a 8b       	std	Y+18, r25	; 0x12
	_delay_ms(10);
	
	write_str_display("Welcome! Select ");
     a2e:	89 8b       	std	Y+17, r24	; 0x11
     a30:	8b eb       	ldi	r24, 0xBB	; 187
     a32:	90 e0       	ldi	r25, 0x00	; 0
	display_line_bottom();
     a34:	44 d1       	rcall	.+648    	; 0xcbe <write_str_display>
     a36:	ff de       	rcall	.-514    	; 0x836 <display_line_bottom>
	write_str_display("time, please!");
     a38:	8c ec       	ldi	r24, 0xCC	; 204
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	40 d1       	rcall	.+640    	; 0xcbe <write_str_display>
     a3e:	00 00       	nop
}
     a40:	6c 96       	adiw	r28, 0x1c	; 28
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <write_c_display>:
     a52:	cf 93       	push	r28

void write_c_display(char c){
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	a1 97       	sbiw	r28, 0x21	; 33
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	89 a3       	std	Y+33, r24	; 0x21
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a8 ec       	ldi	r26, 0xC8	; 200
     a6e:	b2 e4       	ldi	r27, 0x42	; 66
     a70:	89 83       	std	Y+1, r24	; 0x01
     a72:	9a 83       	std	Y+2, r25	; 0x02
     a74:	ab 83       	std	Y+3, r26	; 0x03
     a76:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     a78:	2b ea       	ldi	r18, 0xAB	; 171
     a7a:	3a ea       	ldi	r19, 0xAA	; 170
     a7c:	4a e2       	ldi	r20, 0x2A	; 42
     a7e:	50 e4       	ldi	r21, 0x40	; 64
     a80:	69 81       	ldd	r22, Y+1	; 0x01
     a82:	7a 81       	ldd	r23, Y+2	; 0x02
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	8d 83       	std	Y+5, r24	; 0x05
     a92:	9e 83       	std	Y+6, r25	; 0x06
     a94:	af 83       	std	Y+7, r26	; 0x07
     a96:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
     a9c:	ab 81       	ldd	r26, Y+3	; 0x03
     a9e:	bc 81       	ldd	r27, Y+4	; 0x04
     aa0:	9c 01       	movw	r18, r24
     aa2:	ad 01       	movw	r20, r26
     aa4:	bc 01       	movw	r22, r24
     aa6:	cd 01       	movw	r24, r26
     aa8:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__addsf3>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	89 87       	std	Y+9, r24	; 0x09
     ab2:	9a 87       	std	Y+10, r25	; 0x0a
     ab4:	ab 87       	std	Y+11, r26	; 0x0b
     ab6:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e8       	ldi	r20, 0x80	; 128
     abe:	5f e3       	ldi	r21, 0x3F	; 63
     ac0:	6d 81       	ldd	r22, Y+5	; 0x05
     ac2:	7e 81       	ldd	r23, Y+6	; 0x06
     ac4:	8f 81       	ldd	r24, Y+7	; 0x07
     ac6:	98 85       	ldd	r25, Y+8	; 0x08
     ac8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
     acc:	88 23       	and	r24, r24
     ace:	1c f4       	brge	.+6      	; 0xad6 <write_c_display+0x84>
		__ticks = 1;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	8d 87       	std	Y+13, r24	; 0x0d
     ad4:	b2 c0       	rjmp	.+356    	; 0xc3a <write_c_display+0x1e8>
	else if (__tmp2 > 65535)
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	3f ef       	ldi	r19, 0xFF	; 255
     ada:	4f e7       	ldi	r20, 0x7F	; 127
     adc:	57 e4       	ldi	r21, 0x47	; 71
     ade:	69 85       	ldd	r22, Y+9	; 0x09
     ae0:	7a 85       	ldd	r23, Y+10	; 0x0a
     ae2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ae6:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     aea:	18 16       	cp	r1, r24
     aec:	0c f0       	brlt	.+2      	; 0xaf0 <write_c_display+0x9e>
     aee:	7b c0       	rjmp	.+246    	; 0xbe6 <write_c_display+0x194>
	{
		_delay_ms(__us / 1000.0);
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	4a e7       	ldi	r20, 0x7A	; 122
     af6:	54 e4       	ldi	r21, 0x44	; 68
     af8:	69 81       	ldd	r22, Y+1	; 0x01
     afa:	7a 81       	ldd	r23, Y+2	; 0x02
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__divsf3>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	8e 87       	std	Y+14, r24	; 0x0e
     b0a:	9f 87       	std	Y+15, r25	; 0x0f
     b0c:	a8 8b       	std	Y+16, r26	; 0x10
     b0e:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	4a ef       	ldi	r20, 0xFA	; 250
     b16:	54 e4       	ldi	r21, 0x44	; 68
     b18:	6e 85       	ldd	r22, Y+14	; 0x0e
     b1a:	7f 85       	ldd	r23, Y+15	; 0x0f
     b1c:	88 89       	ldd	r24, Y+16	; 0x10
     b1e:	99 89       	ldd	r25, Y+17	; 0x11
     b20:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	8a 8b       	std	Y+18, r24	; 0x12
     b2a:	9b 8b       	std	Y+19, r25	; 0x13
     b2c:	ac 8b       	std	Y+20, r26	; 0x14
     b2e:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e8       	ldi	r20, 0x80	; 128
     b36:	5f e3       	ldi	r21, 0x3F	; 63
     b38:	6a 89       	ldd	r22, Y+18	; 0x12
     b3a:	7b 89       	ldd	r23, Y+19	; 0x13
     b3c:	8c 89       	ldd	r24, Y+20	; 0x14
     b3e:	9d 89       	ldd	r25, Y+21	; 0x15
     b40:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
     b44:	88 23       	and	r24, r24
     b46:	2c f4       	brge	.+10     	; 0xb52 <write_c_display+0x100>
		__ticks = 1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	9f 8b       	std	Y+23, r25	; 0x17
     b4e:	8e 8b       	std	Y+22, r24	; 0x16
     b50:	3f c0       	rjmp	.+126    	; 0xbd0 <write_c_display+0x17e>
	else if (__tmp > 65535)
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	3f ef       	ldi	r19, 0xFF	; 255
     b56:	4f e7       	ldi	r20, 0x7F	; 127
     b58:	57 e4       	ldi	r21, 0x47	; 71
     b5a:	6a 89       	ldd	r22, Y+18	; 0x12
     b5c:	7b 89       	ldd	r23, Y+19	; 0x13
     b5e:	8c 89       	ldd	r24, Y+20	; 0x14
     b60:	9d 89       	ldd	r25, Y+21	; 0x15
     b62:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     b66:	18 16       	cp	r1, r24
     b68:	4c f5       	brge	.+82     	; 0xbbc <write_c_display+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e2       	ldi	r20, 0x20	; 32
     b70:	51 e4       	ldi	r21, 0x41	; 65
     b72:	6e 85       	ldd	r22, Y+14	; 0x0e
     b74:	7f 85       	ldd	r23, Y+15	; 0x0f
     b76:	88 89       	ldd	r24, Y+16	; 0x10
     b78:	99 89       	ldd	r25, Y+17	; 0x11
     b7a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	bc 01       	movw	r22, r24
     b84:	cd 01       	movw	r24, r26
     b86:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	9f 8b       	std	Y+23, r25	; 0x17
     b90:	8e 8b       	std	Y+22, r24	; 0x16
     b92:	0f c0       	rjmp	.+30     	; 0xbb2 <write_c_display+0x160>
     b94:	88 ec       	ldi	r24, 0xC8	; 200
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	99 8f       	std	Y+25, r25	; 0x19
     b9a:	88 8f       	std	Y+24, r24	; 0x18
     b9c:	88 8d       	ldd	r24, Y+24	; 0x18
     b9e:	99 8d       	ldd	r25, Y+25	; 0x19
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <write_c_display+0x14e>
     ba4:	99 8f       	std	Y+25, r25	; 0x19
     ba6:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba8:	8e 89       	ldd	r24, Y+22	; 0x16
     baa:	9f 89       	ldd	r25, Y+23	; 0x17
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	9f 8b       	std	Y+23, r25	; 0x17
     bb0:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb2:	8e 89       	ldd	r24, Y+22	; 0x16
     bb4:	9f 89       	ldd	r25, Y+23	; 0x17
     bb6:	89 2b       	or	r24, r25
     bb8:	69 f7       	brne	.-38     	; 0xb94 <write_c_display+0x142>
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <write_c_display+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bbc:	6a 89       	ldd	r22, Y+18	; 0x12
     bbe:	7b 89       	ldd	r23, Y+19	; 0x13
     bc0:	8c 89       	ldd	r24, Y+20	; 0x14
     bc2:	9d 89       	ldd	r25, Y+21	; 0x15
     bc4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	9f 8b       	std	Y+23, r25	; 0x17
     bce:	8e 8b       	std	Y+22, r24	; 0x16
     bd0:	8e 89       	ldd	r24, Y+22	; 0x16
     bd2:	9f 89       	ldd	r25, Y+23	; 0x17
     bd4:	9b 8f       	std	Y+27, r25	; 0x1b
     bd6:	8a 8f       	std	Y+26, r24	; 0x1a
     bd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bda:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <write_c_display+0x18a>
     be0:	9b 8f       	std	Y+27, r25	; 0x1b
     be2:	8a 8f       	std	Y+26, r24	; 0x1a
     be4:	2a c0       	rjmp	.+84     	; 0xc3a <write_c_display+0x1e8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	4f e7       	ldi	r20, 0x7F	; 127
     bec:	53 e4       	ldi	r21, 0x43	; 67
     bee:	6d 81       	ldd	r22, Y+5	; 0x05
     bf0:	7e 81       	ldd	r23, Y+6	; 0x06
     bf2:	8f 81       	ldd	r24, Y+7	; 0x07
     bf4:	98 85       	ldd	r25, Y+8	; 0x08
     bf6:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
     bfa:	18 16       	cp	r1, r24
     bfc:	ac f4       	brge	.+42     	; 0xc28 <write_c_display+0x1d6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     bfe:	69 85       	ldd	r22, Y+9	; 0x09
     c00:	7a 85       	ldd	r23, Y+10	; 0x0a
     c02:	8b 85       	ldd	r24, Y+11	; 0x0b
     c04:	9c 85       	ldd	r25, Y+12	; 0x0c
     c06:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	9d 8f       	std	Y+29, r25	; 0x1d
     c10:	8c 8f       	std	Y+28, r24	; 0x1c
     c12:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c14:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c16:	9f 8f       	std	Y+31, r25	; 0x1f
     c18:	8e 8f       	std	Y+30, r24	; 0x1e
     c1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c1c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <write_c_display+0x1cc>
     c22:	9f 8f       	std	Y+31, r25	; 0x1f
     c24:	8e 8f       	std	Y+30, r24	; 0x1e
     c26:	0f c0       	rjmp	.+30     	; 0xc46 <write_c_display+0x1f4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c28:	6d 81       	ldd	r22, Y+5	; 0x05
     c2a:	7e 81       	ldd	r23, Y+6	; 0x06
     c2c:	8f 81       	ldd	r24, Y+7	; 0x07
     c2e:	98 85       	ldd	r25, Y+8	; 0x08
     c30:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	8d 87       	std	Y+13, r24	; 0x0d
     c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3c:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c3e:	88 a1       	ldd	r24, Y+32	; 0x20
     c40:	8a 95       	dec	r24
     c42:	f1 f7       	brne	.-4      	; 0xc40 <write_c_display+0x1ee>
     c44:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(100);
	
	PORTB = c;
     c46:	88 e3       	ldi	r24, 0x38	; 56
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	29 a1       	ldd	r18, Y+33	; 0x21
     c4c:	fc 01       	movw	r30, r24
     c4e:	20 83       	st	Z, r18
	PORTD |= DISPLAY_E;
     c50:	82 e3       	ldi	r24, 0x32	; 50
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	22 e3       	ldi	r18, 0x32	; 50
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	f9 01       	movw	r30, r18
     c5a:	20 81       	ld	r18, Z
     c5c:	20 61       	ori	r18, 0x10	; 16
     c5e:	fc 01       	movw	r30, r24
     c60:	20 83       	st	Z, r18
	PORTD |= DISPLAY_RS;
     c62:	82 e3       	ldi	r24, 0x32	; 50
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	22 e3       	ldi	r18, 0x32	; 50
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	20 81       	ld	r18, Z
     c6e:	21 60       	ori	r18, 0x01	; 1
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
	PORTD &= ~DISPLAY_RW;
     c74:	82 e3       	ldi	r24, 0x32	; 50
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	22 e3       	ldi	r18, 0x32	; 50
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	f9 01       	movw	r30, r18
     c7e:	20 81       	ld	r18, Z
     c80:	2d 7f       	andi	r18, 0xFD	; 253
     c82:	fc 01       	movw	r30, r24
     c84:	20 83       	st	Z, r18
	PORTD &= ~DISPLAY_E;
     c86:	82 e3       	ldi	r24, 0x32	; 50
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	22 e3       	ldi	r18, 0x32	; 50
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	f9 01       	movw	r30, r18
     c90:	20 81       	ld	r18, Z
     c92:	2f 7e       	andi	r18, 0xEF	; 239
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
	PORTD |= DISPLAY_E;
     c98:	82 e3       	ldi	r24, 0x32	; 50
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	22 e3       	ldi	r18, 0x32	; 50
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	f9 01       	movw	r30, r18
     ca2:	20 81       	ld	r18, Z
     ca4:	20 61       	ori	r18, 0x10	; 16
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 83       	st	Z, r18
}
     caa:	00 00       	nop
     cac:	a1 96       	adiw	r28, 0x21	; 33
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <write_str_display>:

void write_str_display(char s[]){
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <write_str_display+0x6>
     cc4:	1f 92       	push	r1
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	9b 83       	std	Y+3, r25	; 0x03
     ccc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     cce:	19 82       	std	Y+1, r1	; 0x01
	
	while(s[i]){
     cd0:	0d c0       	rjmp	.+26     	; 0xcec <write_str_display+0x2e>
		write_c_display(s[i]);
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	2a 81       	ldd	r18, Y+2	; 0x02
     cda:	3b 81       	ldd	r19, Y+3	; 0x03
     cdc:	82 0f       	add	r24, r18
     cde:	93 1f       	adc	r25, r19
     ce0:	fc 01       	movw	r30, r24
     ce2:	80 81       	ld	r24, Z
     ce4:	b6 de       	rcall	.-660    	; 0xa52 <write_c_display>
		i++;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	89 83       	std	Y+1, r24	; 0x01
}

void write_str_display(char s[]){
	uint8_t i = 0;
	
	while(s[i]){
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	2a 81       	ldd	r18, Y+2	; 0x02
     cf4:	3b 81       	ldd	r19, Y+3	; 0x03
     cf6:	82 0f       	add	r24, r18
     cf8:	93 1f       	adc	r25, r19
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	88 23       	and	r24, r24
     d00:	41 f7       	brne	.-48     	; 0xcd2 <write_str_display+0x14>
		write_c_display(s[i]);
		i++;
	}
}
     d02:	00 00       	nop
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <write_int_display>:

void write_int_display(int i){
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	00 d0       	rcall	.+0      	; 0xd16 <write_int_display+0x6>
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	89 83       	std	Y+1, r24	; 0x01
	if(i/10 == 0){
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	09 96       	adiw	r24, 0x09	; 9
     d24:	43 97       	sbiw	r24, 0x13	; 19
     d26:	50 f4       	brcc	.+20     	; 0xd3c <write_int_display+0x2c>
		write_c_display('0' + i%10);
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	2a e0       	ldi	r18, 0x0A	; 10
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	b9 01       	movw	r22, r18
     d32:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divmodhi4>
     d36:	80 5d       	subi	r24, 0xD0	; 208
     d38:	8c de       	rcall	.-744    	; 0xa52 <write_c_display>
	}else{
		write_int_display(i/10);
		write_int_display(i%10);
	}
}
     d3a:	11 c0       	rjmp	.+34     	; 0xd5e <write_int_display+0x4e>

void write_int_display(int i){
	if(i/10 == 0){
		write_c_display('0' + i%10);
	}else{
		write_int_display(i/10);
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	2a e0       	ldi	r18, 0x0A	; 10
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	b9 01       	movw	r22, r18
     d46:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divmodhi4>
     d4a:	cb 01       	movw	r24, r22
     d4c:	e1 df       	rcall	.-62     	; 0xd10 <write_int_display>
		write_int_display(i%10);
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	2a e0       	ldi	r18, 0x0A	; 10
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	b9 01       	movw	r22, r18
     d58:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divmodhi4>
     d5c:	d9 df       	rcall	.-78     	; 0xd10 <write_int_display>
	}
}
     d5e:	00 00       	nop
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	20 e2       	ldi	r18, 0x20	; 32
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
     d7c:	00 00       	nop
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <i2c_start>:
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	00 d0       	rcall	.+0      	; 0xd8a <i2c_start+0x6>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	8a 83       	std	Y+2, r24	; 0x02
     d90:	86 e5       	ldi	r24, 0x56	; 86
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	fc 01       	movw	r30, r24
     d96:	10 82       	st	Z, r1
     d98:	86 e5       	ldi	r24, 0x56	; 86
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	24 ea       	ldi	r18, 0xA4	; 164
     d9e:	fc 01       	movw	r30, r24
     da0:	20 83       	st	Z, r18
     da2:	00 00       	nop
     da4:	86 e5       	ldi	r24, 0x56	; 86
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	fc 01       	movw	r30, r24
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	d4 f7       	brge	.-12     	; 0xda4 <i2c_start+0x20>
     db0:	81 e2       	ldi	r24, 0x21	; 33
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	fc 01       	movw	r30, r24
     db6:	80 81       	ld	r24, Z
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	88 7f       	andi	r24, 0xF8	; 248
     dbe:	99 27       	eor	r25, r25
     dc0:	08 97       	sbiw	r24, 0x08	; 8
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <i2c_start+0x44>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	20 c0       	rjmp	.+64     	; 0xe08 <i2c_start+0x84>
     dc8:	83 e2       	ldi	r24, 0x23	; 35
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	2a 81       	ldd	r18, Y+2	; 0x02
     dce:	fc 01       	movw	r30, r24
     dd0:	20 83       	st	Z, r18
     dd2:	86 e5       	ldi	r24, 0x56	; 86
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	24 e8       	ldi	r18, 0x84	; 132
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
     ddc:	00 00       	nop
     dde:	86 e5       	ldi	r24, 0x56	; 86
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	fc 01       	movw	r30, r24
     de4:	80 81       	ld	r24, Z
     de6:	88 23       	and	r24, r24
     de8:	d4 f7       	brge	.-12     	; 0xdde <i2c_start+0x5a>
     dea:	81 e2       	ldi	r24, 0x21	; 33
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	fc 01       	movw	r30, r24
     df0:	80 81       	ld	r24, Z
     df2:	88 7f       	andi	r24, 0xF8	; 248
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	88 31       	cpi	r24, 0x18	; 24
     dfa:	29 f0       	breq	.+10     	; 0xe06 <i2c_start+0x82>
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	80 34       	cpi	r24, 0x40	; 64
     e00:	11 f0       	breq	.+4      	; 0xe06 <i2c_start+0x82>
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	01 c0       	rjmp	.+2      	; 0xe08 <i2c_start+0x84>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <i2c_write>:
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	1f 92       	push	r1
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	83 e2       	ldi	r24, 0x23	; 35
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	29 81       	ldd	r18, Y+1	; 0x01
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
     e28:	86 e5       	ldi	r24, 0x56	; 86
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	24 e8       	ldi	r18, 0x84	; 132
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18
     e32:	00 00       	nop
     e34:	86 e5       	ldi	r24, 0x56	; 86
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	fc 01       	movw	r30, r24
     e3a:	80 81       	ld	r24, Z
     e3c:	88 23       	and	r24, r24
     e3e:	d4 f7       	brge	.-12     	; 0xe34 <i2c_write+0x22>
     e40:	81 e2       	ldi	r24, 0x21	; 33
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	fc 01       	movw	r30, r24
     e46:	80 81       	ld	r24, Z
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	88 7f       	andi	r24, 0xF8	; 248
     e4e:	99 27       	eor	r25, r25
     e50:	88 97       	sbiw	r24, 0x28	; 40
     e52:	11 f0       	breq	.+4      	; 0xe58 <i2c_write+0x46>
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <i2c_write+0x48>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <i2c_read_ack>:
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	86 e5       	ldi	r24, 0x56	; 86
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	24 ec       	ldi	r18, 0xC4	; 196
     e70:	fc 01       	movw	r30, r24
     e72:	20 83       	st	Z, r18
     e74:	00 00       	nop
     e76:	86 e5       	ldi	r24, 0x56	; 86
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	fc 01       	movw	r30, r24
     e7c:	80 81       	ld	r24, Z
     e7e:	88 23       	and	r24, r24
     e80:	d4 f7       	brge	.-12     	; 0xe76 <i2c_read_ack+0x14>
     e82:	83 e2       	ldi	r24, 0x23	; 35
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	fc 01       	movw	r30, r24
     e88:	80 81       	ld	r24, Z
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <i2c_read_nack>:
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	86 e5       	ldi	r24, 0x56	; 86
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	24 e8       	ldi	r18, 0x84	; 132
     e9e:	fc 01       	movw	r30, r24
     ea0:	20 83       	st	Z, r18
     ea2:	00 00       	nop
     ea4:	86 e5       	ldi	r24, 0x56	; 86
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	fc 01       	movw	r30, r24
     eaa:	80 81       	ld	r24, Z
     eac:	88 23       	and	r24, r24
     eae:	d4 f7       	brge	.-12     	; 0xea4 <i2c_read_nack+0x14>
     eb0:	83 e2       	ldi	r24, 0x23	; 35
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	fc 01       	movw	r30, r24
     eb6:	80 81       	ld	r24, Z
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <i2c_stop>:

void i2c_stop(void){
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     ec6:	86 e5       	ldi	r24, 0x56	; 86
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	24 e9       	ldi	r18, 0x94	; 148
     ecc:	fc 01       	movw	r30, r24
     ece:	20 83       	st	Z, r18
     ed0:	00 00       	nop
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	08 95       	ret

00000ed8 <main>:
/* Constant Post Libraries*/
#define KEY_ENCODER		PD3
#define LED_RED			PC7

/* Body */
int main(void){
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	set_data_direction();
     ee0:	15 d0       	rcall	.+42     	; 0xf0c <set_data_direction>
	buttons_init();
     ee2:	3b d9       	rcall	.-3466   	; 0x15a <buttons_init>
	diod_reset();
     ee4:	4c db       	rcall	.-2408   	; 0x57e <diod_reset>
	clear_display();
     ee6:	15 dc       	rcall	.-2006   	; 0x712 <clear_display>
	adc_init();
     ee8:	df d8       	rcall	.-3650   	; 0xa8 <adc_init>
	time_init();
     eea:	0e 94 ac 10 	call	0x2158	; 0x2158 <time_init>
	sensor_init();
     eee:	03 d1       	rcall	.+518    	; 0x10f6 <sensor_init>
     ef0:	3c df       	rcall	.-392    	; 0xd6a <i2c_init>
	i2c_init();
     ef2:	78 94       	sei
     ef4:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <__data_end>
	
	sei();
	
	while (1){
		if(btn_flag){
     ef8:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <__data_end+0x1>
     efc:	89 2b       	or	r24, r25
     efe:	d1 f3       	breq	.-12     	; 0xef4 <main+0x1c>
     f00:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <__data_end+0x1>
			btn_flag = 0;
     f04:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <__data_end>
     f08:	42 d9       	rcall	.-3452   	; 0x18e <btn_pressed>
			btn_pressed();
     f0a:	f4 cf       	rjmp	.-24     	; 0xef4 <main+0x1c>

00000f0c <set_data_direction>:
     f0c:	cf 93       	push	r28
		}
	}
     f0e:	df 93       	push	r29
}


void set_data_direction(){
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	// Port A: Key encoder and sensor input
	DDRA = 0b00000000;
     f14:	8a e3       	ldi	r24, 0x3A	; 58
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	fc 01       	movw	r30, r24
     f1a:	10 82       	st	Z, r1
	
	// Port B: Display output
	DDRB = 0b11111111;
     f1c:	87 e3       	ldi	r24, 0x37	; 55
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	2f ef       	ldi	r18, 0xFF	; 255
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18
	
	// Port C: Diod output and clock input
	DDRC |= (1 << LED_RED);
     f26:	84 e3       	ldi	r24, 0x34	; 52
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	24 e3       	ldi	r18, 0x34	; 52
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	f9 01       	movw	r30, r18
     f30:	20 81       	ld	r18, Z
     f32:	20 68       	ori	r18, 0x80	; 128
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18
	
	// Port D: Display output, clock interrupt input and key encoder interrupt input.
	DDRD |= DISPLAY_E;
     f38:	81 e3       	ldi	r24, 0x31	; 49
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	21 e3       	ldi	r18, 0x31	; 49
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	f9 01       	movw	r30, r18
     f42:	20 81       	ld	r18, Z
     f44:	20 61       	ori	r18, 0x10	; 16
     f46:	fc 01       	movw	r30, r24
     f48:	20 83       	st	Z, r18
	DDRD |= DISPLAY_RS;
     f4a:	81 e3       	ldi	r24, 0x31	; 49
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	21 e3       	ldi	r18, 0x31	; 49
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	f9 01       	movw	r30, r18
     f54:	20 81       	ld	r18, Z
     f56:	21 60       	ori	r18, 0x01	; 1
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
	DDRD |= DISPLAY_RW;
     f5c:	81 e3       	ldi	r24, 0x31	; 49
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	21 e3       	ldi	r18, 0x31	; 49
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	f9 01       	movw	r30, r18
     f66:	20 81       	ld	r18, Z
     f68:	22 60       	ori	r18, 0x02	; 2
     f6a:	fc 01       	movw	r30, r24
     f6c:	20 83       	st	Z, r18
	DDRD &= ~(1 << KEY_ENCODER);
     f6e:	81 e3       	ldi	r24, 0x31	; 49
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	21 e3       	ldi	r18, 0x31	; 49
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	f9 01       	movw	r30, r18
     f78:	20 81       	ld	r18, Z
     f7a:	27 7f       	andi	r18, 0xF7	; 247
     f7c:	fc 01       	movw	r30, r24
     f7e:	20 83       	st	Z, r18
}
     f80:	00 00       	nop
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <clear_data>:

void clear_data(){
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	time_param_year = YEAR;
     f90:	8b e2       	ldi	r24, 0x2B	; 43
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <time_param_year+0x1>
     f98:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_param_year>
	time_param_month = MONTH;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <time_param_month+0x1>
     fa4:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <time_param_month>
	time_param_day = DAY;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <time_param_day+0x1>
     fb0:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <time_param_day>
	time_param_hour = HOUR;
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <time_param_hour+0x1>
     fbc:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <time_param_hour>
	time_param_minute = MINUTE;
     fc0:	84 e0       	ldi	r24, 0x04	; 4
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <time_param_minute+0x1>
     fc8:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <time_param_minute>
	time_param_second = SECOND;
     fcc:	85 e0       	ldi	r24, 0x05	; 5
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <time_param_second+0x1>
     fd4:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <time_param_second>
	time_param_index = -1;
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <time_param_index+0x1>
     fe0:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <time_param_index>
	
	sensor_temperature = 0;
     fe4:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <sensor_temperature+0x1>
     fe8:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <sensor_temperature>
	sensor_brightness = 0;
     fec:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <sensor_brightness+0x1>
     ff0:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <sensor_brightness>
	sensor_humidity = 0;
     ff4:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <sensor_humidity+0x1>
     ff8:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <sensor_humidity>
	
	temperature_sum = 0;
     ffc:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <temperature_sum+0x1>
    1000:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <temperature_sum>
	temperature_average = 0;
    1004:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <temperature_average+0x1>
    1008:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <temperature_average>
	humidity_sum = 0;
    100c:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <humidity_sum+0x1>
    1010:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <humidity_sum>
	humidity_average = 0;
    1014:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <humidity_average+0x1>
    1018:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <humidity_average>
	brightness_sum = 0;
    101c:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <brightness_sum+0x1>
    1020:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <brightness_sum>
	brightness_average = 0;
    1024:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <brightness_average+0x1>
    1028:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <brightness_average>
	
	temperature_max = -100;
    102c:	8c e9       	ldi	r24, 0x9C	; 156
    102e:	9f ef       	ldi	r25, 0xFF	; 255
    1030:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <temperature_max+0x1>
    1034:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <temperature_max>
	temperature_min = 100;
    1038:	84 e6       	ldi	r24, 0x64	; 100
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <temperature_min+0x1>
    1040:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <temperature_min>
	humidity_max = -100;
    1044:	8c e9       	ldi	r24, 0x9C	; 156
    1046:	9f ef       	ldi	r25, 0xFF	; 255
    1048:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <humidity_max+0x1>
    104c:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <humidity_max>
	humidity_min = 100;
    1050:	84 e6       	ldi	r24, 0x64	; 100
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <humidity_min+0x1>
    1058:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <humidity_min>
	brightness_max = -10000;
    105c:	80 ef       	ldi	r24, 0xF0	; 240
    105e:	98 ed       	ldi	r25, 0xD8	; 216
    1060:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <brightness_max+0x1>
    1064:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <brightness_max>
	brightness_min = 10000;
    1068:	80 e1       	ldi	r24, 0x10	; 16
    106a:	97 e2       	ldi	r25, 0x27	; 39
    106c:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <brightness_min+0x1>
    1070:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <brightness_min>
	
	temperature_quantity = 0;
    1074:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <temperature_quantity+0x1>
    1078:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <temperature_quantity>
	humidity_quantity = 0;
    107c:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <humidity_quantity+0x1>
    1080:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <humidity_quantity>
	brightness_quantity = 0;
    1084:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <brightness_quantity+0x1>
    1088:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <brightness_quantity>
	
	clear_display();
    108c:	42 db       	rcall	.-2428   	; 0x712 <clear_display>
	write_str_display("Data cleared!");
    108e:	8a ed       	ldi	r24, 0xDA	; 218
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	15 de       	rcall	.-982    	; 0xcbe <write_str_display>
}
    1094:	00 00       	nop
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <__vector_2>:

ISR(INT1_vect){
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
	// Button interrupt
	btn_val = (PINA & BUTTON_MASK) >> 4;
    10b8:	89 e3       	ldi	r24, 0x39	; 57
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	fc 01       	movw	r30, r24
    10be:	80 81       	ld	r24, Z
    10c0:	82 95       	swap	r24
    10c2:	8f 70       	andi	r24, 0x0F	; 15
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <btn_val+0x1>
    10cc:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <btn_val>
	btn_flag = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <__data_end+0x1>
    10d8:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__data_end>
    10dc:	00 00       	nop
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	0f 90       	pop	r0
    10ec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10f0:	0f 90       	pop	r0
    10f2:	1f 90       	pop	r1
    10f4:	18 95       	reti

000010f6 <sensor_init>:

/* Constant Post Libraries*/
#define LED_RED			PC7

/* Body */
void sensor_init(){
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	temperature_max = -100;
    10fe:	8c e9       	ldi	r24, 0x9C	; 156
    1100:	9f ef       	ldi	r25, 0xFF	; 255
    1102:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <temperature_max+0x1>
    1106:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <temperature_max>
	temperature_min = 100;
    110a:	84 e6       	ldi	r24, 0x64	; 100
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <temperature_min+0x1>
    1112:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <temperature_min>
	humidity_max = -100;
    1116:	8c e9       	ldi	r24, 0x9C	; 156
    1118:	9f ef       	ldi	r25, 0xFF	; 255
    111a:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <humidity_max+0x1>
    111e:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <humidity_max>
	humidity_min = 100;
    1122:	84 e6       	ldi	r24, 0x64	; 100
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <humidity_min+0x1>
    112a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <humidity_min>
	brightness_max = -10000;
    112e:	80 ef       	ldi	r24, 0xF0	; 240
    1130:	98 ed       	ldi	r25, 0xD8	; 216
    1132:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <brightness_max+0x1>
    1136:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <brightness_max>
	brightness_min = 10000;
    113a:	80 e1       	ldi	r24, 0x10	; 16
    113c:	97 e2       	ldi	r25, 0x27	; 39
    113e:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <brightness_min+0x1>
    1142:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <brightness_min>
}
    1146:	00 00       	nop
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <read_temperature>:

void read_temperature(){
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	sensor_temperature = read_adc(TEMPERATURE_SENSOR) * 4.88 * 0.1 - 273.15;
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	0e 94 77 00 	call	0xee	; 0xee <read_adc>
    115c:	09 2e       	mov	r0, r25
    115e:	00 0c       	add	r0, r0
    1160:	aa 0b       	sbc	r26, r26
    1162:	bb 0b       	sbc	r27, r27
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__floatsisf>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	26 ef       	ldi	r18, 0xF6	; 246
    1172:	38 e2       	ldi	r19, 0x28	; 40
    1174:	4c e9       	ldi	r20, 0x9C	; 156
    1176:	50 e4       	ldi	r21, 0x40	; 64
    1178:	bc 01       	movw	r22, r24
    117a:	cd 01       	movw	r24, r26
    117c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	2d ec       	ldi	r18, 0xCD	; 205
    1186:	3c ec       	ldi	r19, 0xCC	; 204
    1188:	4c ec       	ldi	r20, 0xCC	; 204
    118a:	5d e3       	ldi	r21, 0x3D	; 61
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	23 e3       	ldi	r18, 0x33	; 51
    119a:	33 e9       	ldi	r19, 0x93	; 147
    119c:	48 e8       	ldi	r20, 0x88	; 136
    119e:	53 e4       	ldi	r21, 0x43	; 67
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__subsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__fixsfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <sensor_temperature+0x1>
    11bc:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <sensor_temperature>
	add_temperature(sensor_temperature);
    11c0:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <sensor_temperature>
    11c4:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <sensor_temperature+0x1>
    11c8:	92 d0       	rcall	.+292    	; 0x12ee <add_temperature>
}
    11ca:	00 00       	nop
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <read_humidity>:

void read_humidity(){
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	sensor_humidity =  (read_adc(HUMIDITY_SENSOR) * 4.88 * 0.1 - 80) / 3;
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	0e 94 77 00 	call	0xee	; 0xee <read_adc>
    11e0:	09 2e       	mov	r0, r25
    11e2:	00 0c       	add	r0, r0
    11e4:	aa 0b       	sbc	r26, r26
    11e6:	bb 0b       	sbc	r27, r27
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__floatsisf>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	26 ef       	ldi	r18, 0xF6	; 246
    11f6:	38 e2       	ldi	r19, 0x28	; 40
    11f8:	4c e9       	ldi	r20, 0x9C	; 156
    11fa:	50 e4       	ldi	r21, 0x40	; 64
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	2d ec       	ldi	r18, 0xCD	; 205
    120a:	3c ec       	ldi	r19, 0xCC	; 204
    120c:	4c ec       	ldi	r20, 0xCC	; 204
    120e:	5d e3       	ldi	r21, 0x3D	; 61
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 ea       	ldi	r20, 0xA0	; 160
    1222:	52 e4       	ldi	r21, 0x42	; 66
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <__subsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e4       	ldi	r20, 0x40	; 64
    1236:	50 e4       	ldi	r21, 0x40	; 64
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__divsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	bc 01       	movw	r22, r24
    1246:	cd 01       	movw	r24, r26
    1248:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__fixsfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <sensor_humidity+0x1>
    1254:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <sensor_humidity>
	add_humidity(sensor_humidity);
    1258:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <sensor_humidity>
    125c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <sensor_humidity+0x1>
    1260:	96 d0       	rcall	.+300    	; 0x138e <add_humidity>
}
    1262:	00 00       	nop
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <read_brightness>:

void read_brightness(){
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	sensor_brightness =  read_adc(BRIGHTNESS_SENSOR) * 4.88 * 0.001 * 851.06383;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	0e 94 77 00 	call	0xee	; 0xee <read_adc>
    1278:	09 2e       	mov	r0, r25
    127a:	00 0c       	add	r0, r0
    127c:	aa 0b       	sbc	r26, r26
    127e:	bb 0b       	sbc	r27, r27
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__floatsisf>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	26 ef       	ldi	r18, 0xF6	; 246
    128e:	38 e2       	ldi	r19, 0x28	; 40
    1290:	4c e9       	ldi	r20, 0x9C	; 156
    1292:	50 e4       	ldi	r21, 0x40	; 64
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	2f e6       	ldi	r18, 0x6F	; 111
    12a2:	32 e1       	ldi	r19, 0x12	; 18
    12a4:	43 e8       	ldi	r20, 0x83	; 131
    12a6:	5a e3       	ldi	r21, 0x3A	; 58
    12a8:	bc 01       	movw	r22, r24
    12aa:	cd 01       	movw	r24, r26
    12ac:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	26 e1       	ldi	r18, 0x16	; 22
    12b6:	34 ec       	ldi	r19, 0xC4	; 196
    12b8:	44 e5       	ldi	r20, 0x54	; 84
    12ba:	54 e4       	ldi	r21, 0x44	; 68
    12bc:	bc 01       	movw	r22, r24
    12be:	cd 01       	movw	r24, r26
    12c0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__fixsfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <sensor_brightness+0x1>
    12d8:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <sensor_brightness>
	add_brightness(sensor_brightness);
    12dc:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <sensor_brightness>
    12e0:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <sensor_brightness+0x1>
    12e4:	a4 d0       	rcall	.+328    	; 0x142e <add_brightness>
}
    12e6:	00 00       	nop
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <add_temperature>:

void add_temperature(int temperature){
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <add_temperature+0x6>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
	temperature_sum += temperature;
    12fc:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <temperature_sum>
    1300:	30 91 45 03 	lds	r19, 0x0345	; 0x800345 <temperature_sum+0x1>
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <temperature_sum+0x1>
    1310:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <temperature_sum>
	temperature_quantity++;
    1314:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <temperature_quantity>
    1318:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <temperature_quantity+0x1>
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <temperature_quantity+0x1>
    1322:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <temperature_quantity>
	temperature_average = temperature_sum / temperature_quantity;
    1326:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <temperature_sum>
    132a:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <temperature_sum+0x1>
    132e:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <temperature_quantity>
    1332:	30 91 39 03 	lds	r19, 0x0339	; 0x800339 <temperature_quantity+0x1>
    1336:	b9 01       	movw	r22, r18
    1338:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divmodhi4>
    133c:	cb 01       	movw	r24, r22
    133e:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <temperature_average+0x1>
    1342:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <temperature_average>
	
	if(temperature < temperature_min) temperature_min = temperature;
    1346:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <temperature_min>
    134a:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <temperature_min+0x1>
    134e:	29 81       	ldd	r18, Y+1	; 0x01
    1350:	3a 81       	ldd	r19, Y+2	; 0x02
    1352:	28 17       	cp	r18, r24
    1354:	39 07       	cpc	r19, r25
    1356:	34 f4       	brge	.+12     	; 0x1364 <add_temperature+0x76>
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <temperature_min+0x1>
    1360:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <temperature_min>
	if(temperature > temperature_max) temperature_max = temperature;
    1364:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <temperature_max>
    1368:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <temperature_max+0x1>
    136c:	29 81       	ldd	r18, Y+1	; 0x01
    136e:	3a 81       	ldd	r19, Y+2	; 0x02
    1370:	82 17       	cp	r24, r18
    1372:	93 07       	cpc	r25, r19
    1374:	34 f4       	brge	.+12     	; 0x1382 <add_temperature+0x94>
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	9a 81       	ldd	r25, Y+2	; 0x02
    137a:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <temperature_max+0x1>
    137e:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <temperature_max>
}
    1382:	00 00       	nop
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <add_humidity>:

void add_humidity(int humidity){
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	00 d0       	rcall	.+0      	; 0x1394 <add_humidity+0x6>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
	humidity_sum += humidity;
    139c:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <humidity_sum>
    13a0:	30 91 6d 03 	lds	r19, 0x036D	; 0x80036d <humidity_sum+0x1>
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <humidity_sum+0x1>
    13b0:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <humidity_sum>
	humidity_quantity++;
    13b4:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <humidity_quantity>
    13b8:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <humidity_quantity+0x1>
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <humidity_quantity+0x1>
    13c2:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <humidity_quantity>
	humidity_average = humidity_sum / humidity_quantity;
    13c6:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <humidity_sum>
    13ca:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <humidity_sum+0x1>
    13ce:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <humidity_quantity>
    13d2:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <humidity_quantity+0x1>
    13d6:	b9 01       	movw	r22, r18
    13d8:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divmodhi4>
    13dc:	cb 01       	movw	r24, r22
    13de:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <humidity_average+0x1>
    13e2:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <humidity_average>
	
	if(humidity < humidity_min) humidity_min = humidity;
    13e6:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <humidity_min>
    13ea:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <humidity_min+0x1>
    13ee:	29 81       	ldd	r18, Y+1	; 0x01
    13f0:	3a 81       	ldd	r19, Y+2	; 0x02
    13f2:	28 17       	cp	r18, r24
    13f4:	39 07       	cpc	r19, r25
    13f6:	34 f4       	brge	.+12     	; 0x1404 <add_humidity+0x76>
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <humidity_min+0x1>
    1400:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <humidity_min>
	if(humidity > humidity_max) humidity_max = humidity;
    1404:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <humidity_max>
    1408:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <humidity_max+0x1>
    140c:	29 81       	ldd	r18, Y+1	; 0x01
    140e:	3a 81       	ldd	r19, Y+2	; 0x02
    1410:	82 17       	cp	r24, r18
    1412:	93 07       	cpc	r25, r19
    1414:	34 f4       	brge	.+12     	; 0x1422 <add_humidity+0x94>
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <humidity_max+0x1>
    141e:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <humidity_max>
}
    1422:	00 00       	nop
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <add_brightness>:

void add_brightness(int brightness){
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	00 d0       	rcall	.+0      	; 0x1434 <add_brightness+0x6>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
	brightness_sum += brightness;
    143c:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <brightness_sum>
    1440:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <brightness_sum+0x1>
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <brightness_sum+0x1>
    1450:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <brightness_sum>
	brightness_quantity++;
    1454:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <brightness_quantity>
    1458:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <brightness_quantity+0x1>
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <brightness_quantity+0x1>
    1462:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <brightness_quantity>
	brightness_average = brightness_sum / brightness_quantity;
    1466:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <brightness_sum>
    146a:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <brightness_sum+0x1>
    146e:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <brightness_quantity>
    1472:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <brightness_quantity+0x1>
    1476:	b9 01       	movw	r22, r18
    1478:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divmodhi4>
    147c:	cb 01       	movw	r24, r22
    147e:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <brightness_average+0x1>
    1482:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <brightness_average>
	
	if(brightness < brightness_min) brightness_min = brightness;
    1486:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <brightness_min>
    148a:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <brightness_min+0x1>
    148e:	29 81       	ldd	r18, Y+1	; 0x01
    1490:	3a 81       	ldd	r19, Y+2	; 0x02
    1492:	28 17       	cp	r18, r24
    1494:	39 07       	cpc	r19, r25
    1496:	34 f4       	brge	.+12     	; 0x14a4 <add_brightness+0x76>
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <brightness_min+0x1>
    14a0:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <brightness_min>
	if(brightness > brightness_max) brightness_max = brightness;
    14a4:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <brightness_max>
    14a8:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <brightness_max+0x1>
    14ac:	29 81       	ldd	r18, Y+1	; 0x01
    14ae:	3a 81       	ldd	r19, Y+2	; 0x02
    14b0:	82 17       	cp	r24, r18
    14b2:	93 07       	cpc	r25, r19
    14b4:	34 f4       	brge	.+12     	; 0x14c2 <add_brightness+0x94>
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <brightness_max+0x1>
    14be:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <brightness_max>
}
    14c2:	00 00       	nop
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <display_temperature>:

void display_temperature(){
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	2e 97       	sbiw	r28, 0x0e	; 14
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
	read_temperature();
    14e2:	35 de       	rcall	.-918    	; 0x114e <read_temperature>
	
	clear_display();
    14e4:	16 d9       	rcall	.-3540   	; 0x712 <clear_display>
    14e6:	88 ee       	ldi	r24, 0xE8	; 232
	
	write_str_display("Temperature: ");
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	e9 db       	rcall	.-2094   	; 0xcbe <write_str_display>
    14ec:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <sensor_temperature>
	write_int_display(sensor_temperature);
    14f0:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <sensor_temperature+0x1>
    14f4:	0d dc       	rcall	.-2022   	; 0xd10 <write_int_display>
	write_str_display("C");
    14f6:	86 ef       	ldi	r24, 0xF6	; 246
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	e1 db       	rcall	.-2110   	; 0xcbe <write_str_display>
	
	display_line_bottom();
    14fc:	9c d9       	rcall	.-3272   	; 0x836 <display_line_bottom>
    14fe:	88 ef       	ldi	r24, 0xF8	; 248
	
	write_str_display("Average: ");
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	dd db       	rcall	.-2118   	; 0xcbe <write_str_display>
    1504:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <temperature_average>
	write_int_display(temperature_average);
    1508:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <temperature_average+0x1>
    150c:	01 dc       	rcall	.-2046   	; 0xd10 <write_int_display>
    150e:	86 ef       	ldi	r24, 0xF6	; 246
	write_str_display("C");
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	d5 db       	rcall	.-2134   	; 0xcbe <write_str_display>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e8       	ldi	r25, 0x80	; 128
    1518:	ab e3       	ldi	r26, 0x3B	; 59
    151a:	b5 e4       	ldi	r27, 0x45	; 69
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	ab 83       	std	Y+3, r26	; 0x03
    1522:	bc 83       	std	Y+4, r27	; 0x04
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1528:	4a ef       	ldi	r20, 0xFA	; 250
    152a:	54 e4       	ldi	r21, 0x44	; 68
    152c:	69 81       	ldd	r22, Y+1	; 0x01
    152e:	7a 81       	ldd	r23, Y+2	; 0x02
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	af 83       	std	Y+7, r26	; 0x07
    1542:	b8 87       	std	Y+8, r27	; 0x08
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    1548:	40 e8       	ldi	r20, 0x80	; 128
    154a:	5f e3       	ldi	r21, 0x3F	; 63
    154c:	6d 81       	ldd	r22, Y+5	; 0x05
    154e:	7e 81       	ldd	r23, Y+6	; 0x06
    1550:	8f 81       	ldd	r24, Y+7	; 0x07
    1552:	98 85       	ldd	r25, Y+8	; 0x08
    1554:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <display_temperature+0x98>
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    1560:	9a 87       	std	Y+10, r25	; 0x0a
    1562:	89 87       	std	Y+9, r24	; 0x09
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <display_temperature+0x116>
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	6d 81       	ldd	r22, Y+5	; 0x05
    1570:	7e 81       	ldd	r23, Y+6	; 0x06
    1572:	8f 81       	ldd	r24, Y+7	; 0x07
    1574:	98 85       	ldd	r25, Y+8	; 0x08
    1576:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <display_temperature+0x102>
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1582:	40 e2       	ldi	r20, 0x20	; 32
    1584:	51 e4       	ldi	r21, 0x41	; 65
    1586:	69 81       	ldd	r22, Y+1	; 0x01
    1588:	7a 81       	ldd	r23, Y+2	; 0x02
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9a 87       	std	Y+10, r25	; 0x0a
    15a4:	89 87       	std	Y+9, r24	; 0x09
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <display_temperature+0xf8>
    15a8:	88 ec       	ldi	r24, 0xC8	; 200
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9c 87       	std	Y+12, r25	; 0x0c
    15ae:	8b 87       	std	Y+11, r24	; 0x0b
    15b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <display_temperature+0xe6>
    15b8:	9c 87       	std	Y+12, r25	; 0x0c
    15ba:	8b 87       	std	Y+11, r24	; 0x0b
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9a 87       	std	Y+10, r25	; 0x0a
    15c4:	89 87       	std	Y+9, r24	; 0x09
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	9a 85       	ldd	r25, Y+10	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ca:	89 2b       	or	r24, r25
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <display_temperature+0xda>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <display_temperature+0x12a>
    15d0:	6d 81       	ldd	r22, Y+5	; 0x05
    15d2:	7e 81       	ldd	r23, Y+6	; 0x06
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d4:	8f 81       	ldd	r24, Y+7	; 0x07
    15d6:	98 85       	ldd	r25, Y+8	; 0x08
    15d8:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9a 87       	std	Y+10, r25	; 0x0a
    15e2:	89 87       	std	Y+9, r24	; 0x09
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	9e 87       	std	Y+14, r25	; 0x0e
    15ea:	8d 87       	std	Y+13, r24	; 0x0d
    15ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <display_temperature+0x122>
    15f4:	9e 87       	std	Y+14, r25	; 0x0e
	
	_delay_ms(3000);
	clear_display();
    15f6:	8d 87       	std	Y+13, r24	; 0x0d
	display_line_top();
    15f8:	8c d8       	rcall	.-3816   	; 0x712 <clear_display>
	
	write_str_display("Max: ");
    15fa:	13 d9       	rcall	.-3546   	; 0x822 <display_line_top>
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	91 e0       	ldi	r25, 0x01	; 1
	write_int_display(temperature_max);
    1600:	5e db       	rcall	.-2372   	; 0xcbe <write_str_display>
    1602:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <temperature_max>
    1606:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <temperature_max+0x1>
	write_str_display("C");
    160a:	82 db       	rcall	.-2300   	; 0xd10 <write_int_display>
    160c:	86 ef       	ldi	r24, 0xF6	; 246
    160e:	90 e0       	ldi	r25, 0x00	; 0
	
	display_line_bottom();
    1610:	56 db       	rcall	.-2388   	; 0xcbe <write_str_display>
    1612:	11 d9       	rcall	.-3550   	; 0x836 <display_line_bottom>
	
	write_str_display("Min: ");
    1614:	88 e0       	ldi	r24, 0x08	; 8
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	52 db       	rcall	.-2396   	; 0xcbe <write_str_display>
    161a:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <temperature_min>
	write_int_display(temperature_min);
    161e:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <temperature_min+0x1>
    1622:	76 db       	rcall	.-2324   	; 0xd10 <write_int_display>
    1624:	86 ef       	ldi	r24, 0xF6	; 246
    1626:	90 e0       	ldi	r25, 0x00	; 0
	write_str_display("C");
    1628:	4a db       	rcall	.-2412   	; 0xcbe <write_str_display>
    162a:	00 00       	nop
    162c:	2e 96       	adiw	r28, 0x0e	; 14
    162e:	0f b6       	in	r0, 0x3f	; 63
}
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <display_humidity>:
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	cd b7       	in	r28, 0x3d	; 61

void display_humidity(){
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	2e 97       	sbiw	r28, 0x0e	; 14
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
	read_humidity();
    1652:	bf dd       	rcall	.-1154   	; 0x11d2 <read_humidity>
	
	clear_display();
    1654:	5e d8       	rcall	.-3908   	; 0x712 <clear_display>
    1656:	8e e0       	ldi	r24, 0x0E	; 14
	
	write_str_display("Humidity: ");
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	31 db       	rcall	.-2462   	; 0xcbe <write_str_display>
    165c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <sensor_humidity>
	write_int_display(sensor_humidity);
    1660:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <sensor_humidity+0x1>
    1664:	55 db       	rcall	.-2390   	; 0xd10 <write_int_display>
	write_str_display("%");
    1666:	89 e1       	ldi	r24, 0x19	; 25
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	29 db       	rcall	.-2478   	; 0xcbe <write_str_display>
	
	display_line_bottom();
    166c:	e4 d8       	rcall	.-3640   	; 0x836 <display_line_bottom>
    166e:	88 ef       	ldi	r24, 0xF8	; 248
	
	write_str_display("Average: ");
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	25 db       	rcall	.-2486   	; 0xcbe <write_str_display>
    1674:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <humidity_average>
	write_int_display(humidity_average);
    1678:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <humidity_average+0x1>
    167c:	49 db       	rcall	.-2414   	; 0xd10 <write_int_display>
    167e:	89 e1       	ldi	r24, 0x19	; 25
	write_str_display("%");
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	1d db       	rcall	.-2502   	; 0xcbe <write_str_display>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e8       	ldi	r25, 0x80	; 128
    1688:	ab e3       	ldi	r26, 0x3B	; 59
    168a:	b5 e4       	ldi	r27, 0x45	; 69
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	9a 83       	std	Y+2, r25	; 0x02
    1690:	ab 83       	std	Y+3, r26	; 0x03
    1692:	bc 83       	std	Y+4, r27	; 0x04
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1698:	4a ef       	ldi	r20, 0xFA	; 250
    169a:	54 e4       	ldi	r21, 0x44	; 68
    169c:	69 81       	ldd	r22, Y+1	; 0x01
    169e:	7a 81       	ldd	r23, Y+2	; 0x02
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8d 83       	std	Y+5, r24	; 0x05
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	af 83       	std	Y+7, r26	; 0x07
    16b2:	b8 87       	std	Y+8, r27	; 0x08
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	6d 81       	ldd	r22, Y+5	; 0x05
    16be:	7e 81       	ldd	r23, Y+6	; 0x06
    16c0:	8f 81       	ldd	r24, Y+7	; 0x07
    16c2:	98 85       	ldd	r25, Y+8	; 0x08
    16c4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <display_humidity+0x98>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    16d0:	9a 87       	std	Y+10, r25	; 0x0a
    16d2:	89 87       	std	Y+9, r24	; 0x09
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <display_humidity+0x116>
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	6d 81       	ldd	r22, Y+5	; 0x05
    16e0:	7e 81       	ldd	r23, Y+6	; 0x06
    16e2:	8f 81       	ldd	r24, Y+7	; 0x07
    16e4:	98 85       	ldd	r25, Y+8	; 0x08
    16e6:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	4c f5       	brge	.+82     	; 0x1740 <display_humidity+0x102>
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	69 81       	ldd	r22, Y+1	; 0x01
    16f8:	7a 81       	ldd	r23, Y+2	; 0x02
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9a 87       	std	Y+10, r25	; 0x0a
    1714:	89 87       	std	Y+9, r24	; 0x09
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <display_humidity+0xf8>
    1718:	88 ec       	ldi	r24, 0xC8	; 200
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9c 87       	std	Y+12, r25	; 0x0c
    171e:	8b 87       	std	Y+11, r24	; 0x0b
    1720:	8b 85       	ldd	r24, Y+11	; 0x0b
    1722:	9c 85       	ldd	r25, Y+12	; 0x0c
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <display_humidity+0xe6>
    1728:	9c 87       	std	Y+12, r25	; 0x0c
    172a:	8b 87       	std	Y+11, r24	; 0x0b
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9a 87       	std	Y+10, r25	; 0x0a
    1734:	89 87       	std	Y+9, r24	; 0x09
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	89 2b       	or	r24, r25
    173c:	69 f7       	brne	.-38     	; 0x1718 <display_humidity+0xda>
    173e:	14 c0       	rjmp	.+40     	; 0x1768 <display_humidity+0x12a>
    1740:	6d 81       	ldd	r22, Y+5	; 0x05
    1742:	7e 81       	ldd	r23, Y+6	; 0x06
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	8f 81       	ldd	r24, Y+7	; 0x07
    1746:	98 85       	ldd	r25, Y+8	; 0x08
    1748:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9a 87       	std	Y+10, r25	; 0x0a
    1752:	89 87       	std	Y+9, r24	; 0x09
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	9e 87       	std	Y+14, r25	; 0x0e
    175a:	8d 87       	std	Y+13, r24	; 0x0d
    175c:	8d 85       	ldd	r24, Y+13	; 0x0d
    175e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <display_humidity+0x122>
    1764:	9e 87       	std	Y+14, r25	; 0x0e
    1766:	8d 87       	std	Y+13, r24	; 0x0d
	
	_delay_ms(3000);
	clear_display();
    1768:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
	display_line_top();
    176c:	5a d8       	rcall	.-3916   	; 0x822 <display_line_top>
	
	write_str_display("Max: ");
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	91 e0       	ldi	r25, 0x01	; 1
	write_int_display(humidity_max);
    1772:	a5 da       	rcall	.-2742   	; 0xcbe <write_str_display>
    1774:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <humidity_max>
    1778:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <humidity_max+0x1>
	write_str_display("%");
    177c:	c9 da       	rcall	.-2670   	; 0xd10 <write_int_display>
    177e:	89 e1       	ldi	r24, 0x19	; 25
    1780:	91 e0       	ldi	r25, 0x01	; 1
	
	display_line_bottom();
    1782:	9d da       	rcall	.-2758   	; 0xcbe <write_str_display>
    1784:	58 d8       	rcall	.-3920   	; 0x836 <display_line_bottom>
	
	write_str_display("Min: ");
    1786:	88 e0       	ldi	r24, 0x08	; 8
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	99 da       	rcall	.-2766   	; 0xcbe <write_str_display>
    178c:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <humidity_min>
	write_int_display(humidity_min);
    1790:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <humidity_min+0x1>
    1794:	bd da       	rcall	.-2694   	; 0xd10 <write_int_display>
    1796:	89 e1       	ldi	r24, 0x19	; 25
    1798:	91 e0       	ldi	r25, 0x01	; 1
	write_str_display("%");
    179a:	91 da       	rcall	.-2782   	; 0xcbe <write_str_display>
    179c:	00 00       	nop
    179e:	2e 96       	adiw	r28, 0x0e	; 14
    17a0:	0f b6       	in	r0, 0x3f	; 63
}
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	08 95       	ret

000017b0 <display_brightness>:
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61

void display_brightness(){
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	2e 97       	sbiw	r28, 0x0e	; 14
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
	read_brightness();
    17c4:	52 dd       	rcall	.-1372   	; 0x126a <read_brightness>
	
	clear_display();
    17c6:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
	
	write_str_display("Light: ");
    17ca:	8b e1       	ldi	r24, 0x1B	; 27
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	77 da       	rcall	.-2834   	; 0xcbe <write_str_display>
	write_int_display(sensor_brightness);
    17d0:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <sensor_brightness>
    17d4:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <sensor_brightness+0x1>
    17d8:	9b da       	rcall	.-2762   	; 0xd10 <write_int_display>
	write_str_display("Lux");
    17da:	83 e2       	ldi	r24, 0x23	; 35
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	6f da       	rcall	.-2850   	; 0xcbe <write_str_display>
	
	display_line_bottom();
    17e0:	2a d8       	rcall	.-4012   	; 0x836 <display_line_bottom>
	
	write_str_display("Average: ");
    17e2:	88 ef       	ldi	r24, 0xF8	; 248
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	6b da       	rcall	.-2858   	; 0xcbe <write_str_display>
	write_int_display(brightness_average);
    17e8:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <brightness_average>
    17ec:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <brightness_average+0x1>
    17f0:	8f da       	rcall	.-2786   	; 0xd10 <write_int_display>
	write_str_display("Lux");
    17f2:	83 e2       	ldi	r24, 0x23	; 35
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	63 da       	rcall	.-2874   	; 0xcbe <write_str_display>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e8       	ldi	r25, 0x80	; 128
    17fc:	ab e3       	ldi	r26, 0x3B	; 59
    17fe:	b5 e4       	ldi	r27, 0x45	; 69
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	ab 83       	std	Y+3, r26	; 0x03
    1806:	bc 83       	std	Y+4, r27	; 0x04
    1808:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	4a ef       	ldi	r20, 0xFA	; 250
    180e:	54 e4       	ldi	r21, 0x44	; 68
    1810:	69 81       	ldd	r22, Y+1	; 0x01
    1812:	7a 81       	ldd	r23, Y+2	; 0x02
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	af 83       	std	Y+7, r26	; 0x07
    1826:	b8 87       	std	Y+8, r27	; 0x08
    1828:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	6d 81       	ldd	r22, Y+5	; 0x05
    1832:	7e 81       	ldd	r23, Y+6	; 0x06
    1834:	8f 81       	ldd	r24, Y+7	; 0x07
    1836:	98 85       	ldd	r25, Y+8	; 0x08
    1838:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <display_brightness+0x9a>
    1840:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9a 87       	std	Y+10, r25	; 0x0a
    1846:	89 87       	std	Y+9, r24	; 0x09
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <display_brightness+0x118>
    184a:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	6d 81       	ldd	r22, Y+5	; 0x05
    1854:	7e 81       	ldd	r23, Y+6	; 0x06
    1856:	8f 81       	ldd	r24, Y+7	; 0x07
    1858:	98 85       	ldd	r25, Y+8	; 0x08
    185a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <display_brightness+0x104>
    1862:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e2       	ldi	r20, 0x20	; 32
    1868:	51 e4       	ldi	r21, 0x41	; 65
    186a:	69 81       	ldd	r22, Y+1	; 0x01
    186c:	7a 81       	ldd	r23, Y+2	; 0x02
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9a 87       	std	Y+10, r25	; 0x0a
    1888:	89 87       	std	Y+9, r24	; 0x09
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <display_brightness+0xfa>
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9c 87       	std	Y+12, r25	; 0x0c
    1892:	8b 87       	std	Y+11, r24	; 0x0b
    1894:	8b 85       	ldd	r24, Y+11	; 0x0b
    1896:	9c 85       	ldd	r25, Y+12	; 0x0c
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <display_brightness+0xe8>
    189c:	9c 87       	std	Y+12, r25	; 0x0c
    189e:	8b 87       	std	Y+11, r24	; 0x0b
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9a 87       	std	Y+10, r25	; 0x0a
    18a8:	89 87       	std	Y+9, r24	; 0x09
    18aa:	89 85       	ldd	r24, Y+9	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ae:	89 2b       	or	r24, r25
    18b0:	69 f7       	brne	.-38     	; 0x188c <display_brightness+0xdc>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <display_brightness+0x12c>
    18b4:	6d 81       	ldd	r22, Y+5	; 0x05
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	7e 81       	ldd	r23, Y+6	; 0x06
    18b8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ba:	98 85       	ldd	r25, Y+8	; 0x08
    18bc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9a 87       	std	Y+10, r25	; 0x0a
    18c6:	89 87       	std	Y+9, r24	; 0x09
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	9e 87       	std	Y+14, r25	; 0x0e
    18ce:	8d 87       	std	Y+13, r24	; 0x0d
    18d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <display_brightness+0x124>
    18d8:	9e 87       	std	Y+14, r25	; 0x0e
    18da:	8d 87       	std	Y+13, r24	; 0x0d
	
	_delay_ms(3000);
	clear_display();
    18dc:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
	display_line_top();
    18e0:	0e 94 11 04 	call	0x822	; 0x822 <display_line_top>
	
	write_str_display("Max: ");
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	ea d9       	rcall	.-3116   	; 0xcbe <write_str_display>
	write_int_display(brightness_max);
    18ea:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <brightness_max>
    18ee:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <brightness_max+0x1>
    18f2:	0e da       	rcall	.-3044   	; 0xd10 <write_int_display>
	write_str_display("Lux");
    18f4:	83 e2       	ldi	r24, 0x23	; 35
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	e2 d9       	rcall	.-3132   	; 0xcbe <write_str_display>
	
	display_line_bottom();
    18fa:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
	
	write_str_display("Min: ");
    18fe:	88 e0       	ldi	r24, 0x08	; 8
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	dd d9       	rcall	.-3142   	; 0xcbe <write_str_display>
	write_int_display(brightness_min);
    1904:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <brightness_min>
    1908:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <brightness_min+0x1>
    190c:	01 da       	rcall	.-3070   	; 0xd10 <write_int_display>
    190e:	83 e2       	ldi	r24, 0x23	; 35
	write_str_display("Lux");
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	d5 d9       	rcall	.-3158   	; 0xcbe <write_str_display>
    1914:	00 00       	nop
    1916:	2e 96       	adiw	r28, 0x0e	; 14
}
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	08 95       	ret

00001928 <display_warning>:
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17

void display_warning(){
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	c4 55       	subi	r28, 0x54	; 84
    1936:	d1 09       	sbc	r29, r1
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
	warning_active = 0;
    1942:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <warning_active+0x1>
    1946:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <warning_active>
	
	read_temperature();
    194a:	01 dc       	rcall	.-2046   	; 0x114e <read_temperature>
	read_humidity();
    194c:	42 dc       	rcall	.-1916   	; 0x11d2 <read_humidity>
	read_brightness();
    194e:	8d dc       	rcall	.-1766   	; 0x126a <read_brightness>
    1950:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
	
	clear_display();
    1954:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <sensor_temperature>
	
	if(sensor_temperature < 0){
    1958:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <sensor_temperature+0x1>
    195c:	99 23       	and	r25, r25
    195e:	0c f0       	brlt	.+2      	; 0x1962 <display_warning+0x3a>
    1960:	86 c0       	rjmp	.+268    	; 0x1a6e <display_warning+0x146>
    1962:	0e 94 ad 02 	call	0x55a	; 0x55a <diod_active>
		diod_active();
		write_str_display("Watch out ");
    1966:	87 e2       	ldi	r24, 0x27	; 39
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	a9 d9       	rcall	.-3246   	; 0xcbe <write_str_display>
    196c:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		display_line_bottom();
		write_str_display("for ice!");
    1970:	82 e3       	ldi	r24, 0x32	; 50
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	a4 d9       	rcall	.-3256   	; 0xcbe <write_str_display>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e8       	ldi	r25, 0x80	; 128
    197a:	ab e3       	ldi	r26, 0x3B	; 59
    197c:	b5 e4       	ldi	r27, 0x45	; 69
    197e:	8d 8b       	std	Y+21, r24	; 0x15
    1980:	9e 8b       	std	Y+22, r25	; 0x16
    1982:	af 8b       	std	Y+23, r26	; 0x17
    1984:	b8 8f       	std	Y+24, r27	; 0x18
    1986:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a ef       	ldi	r20, 0xFA	; 250
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	6d 89       	ldd	r22, Y+21	; 0x15
    1990:	7e 89       	ldd	r23, Y+22	; 0x16
    1992:	8f 89       	ldd	r24, Y+23	; 0x17
    1994:	98 8d       	ldd	r25, Y+24	; 0x18
    1996:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	89 8f       	std	Y+25, r24	; 0x19
    19a0:	9a 8f       	std	Y+26, r25	; 0x1a
    19a2:	ab 8f       	std	Y+27, r26	; 0x1b
    19a4:	bc 8f       	std	Y+28, r27	; 0x1c
    19a6:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	69 8d       	ldd	r22, Y+25	; 0x19
    19b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <display_warning+0xa0>
    19be:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9e 8f       	std	Y+30, r25	; 0x1e
    19c4:	8d 8f       	std	Y+29, r24	; 0x1d
    19c6:	3f c0       	rjmp	.+126    	; 0x1a46 <display_warning+0x11e>
    19c8:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	57 e4       	ldi	r21, 0x47	; 71
    19d0:	69 8d       	ldd	r22, Y+25	; 0x19
    19d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d8:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
    19dc:	18 16       	cp	r1, r24
    19de:	4c f5       	brge	.+82     	; 0x1a32 <display_warning+0x10a>
    19e0:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	51 e4       	ldi	r21, 0x41	; 65
    19e8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ea:	7e 89       	ldd	r23, Y+22	; 0x16
    19ec:	8f 89       	ldd	r24, Y+23	; 0x17
    19ee:	98 8d       	ldd	r25, Y+24	; 0x18
    19f0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 8f       	std	Y+30, r25	; 0x1e
    1a06:	8d 8f       	std	Y+29, r24	; 0x1d
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <display_warning+0x100>
    1a0a:	88 ec       	ldi	r24, 0xC8	; 200
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	98 a3       	std	Y+32, r25	; 0x20
    1a10:	8f 8f       	std	Y+31, r24	; 0x1f
    1a12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a14:	98 a1       	ldd	r25, Y+32	; 0x20
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <display_warning+0xee>
    1a1a:	98 a3       	std	Y+32, r25	; 0x20
    1a1c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9e 8f       	std	Y+30, r25	; 0x1e
    1a26:	8d 8f       	std	Y+29, r24	; 0x1d
    1a28:	8d 8d       	ldd	r24, Y+29	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a2c:	89 2b       	or	r24, r25
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <display_warning+0xe2>
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <display_warning+0x132>
    1a32:	69 8d       	ldd	r22, Y+25	; 0x19
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a3a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 8f       	std	Y+30, r25	; 0x1e
    1a44:	8d 8f       	std	Y+29, r24	; 0x1d
    1a46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a4a:	9a a3       	std	Y+34, r25	; 0x22
    1a4c:	89 a3       	std	Y+33, r24	; 0x21
    1a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a50:	9a a1       	ldd	r25, Y+34	; 0x22
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <display_warning+0x12a>
    1a56:	9a a3       	std	Y+34, r25	; 0x22
    1a58:	89 a3       	std	Y+33, r24	; 0x21
    1a5a:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
		_delay_ms(3000);
		clear_display();
    1a5e:	0e 94 bf 02 	call	0x57e	; 0x57e <diod_reset>
		diod_reset();
    1a62:	81 e0       	ldi	r24, 0x01	; 1
		warning_active = 1;
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <warning_active+0x1>
    1a6a:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <warning_active>
    1a6e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <sensor_temperature>
	}
	
	if(sensor_temperature > 30){
    1a72:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <sensor_temperature+0x1>
    1a76:	4f 97       	sbiw	r24, 0x1f	; 31
    1a78:	0c f4       	brge	.+2      	; 0x1a7c <display_warning+0x154>
    1a7a:	86 c0       	rjmp	.+268    	; 0x1b88 <display_warning+0x260>
		diod_active();
    1a7c:	0e 94 ad 02 	call	0x55a	; 0x55a <diod_active>
		write_str_display("Too hot ");
    1a80:	8b e3       	ldi	r24, 0x3B	; 59
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	1c d9       	rcall	.-3528   	; 0xcbe <write_str_display>
		display_line_bottom();
    1a86:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("to handle!");
    1a8a:	84 e4       	ldi	r24, 0x44	; 68
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	17 d9       	rcall	.-3538   	; 0xcbe <write_str_display>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e8       	ldi	r25, 0x80	; 128
    1a94:	ab e3       	ldi	r26, 0x3B	; 59
    1a96:	b5 e4       	ldi	r27, 0x45	; 69
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	ab 83       	std	Y+3, r26	; 0x03
    1a9e:	bc 83       	std	Y+4, r27	; 0x04
    1aa0:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a ef       	ldi	r20, 0xFA	; 250
    1aa6:	54 e4       	ldi	r21, 0x44	; 68
    1aa8:	69 81       	ldd	r22, Y+1	; 0x01
    1aaa:	7a 81       	ldd	r23, Y+2	; 0x02
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8b a3       	std	Y+35, r24	; 0x23
    1aba:	9c a3       	std	Y+36, r25	; 0x24
    1abc:	ad a3       	std	Y+37, r26	; 0x25
    1abe:	be a3       	std	Y+38, r27	; 0x26
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e8       	ldi	r20, 0x80	; 128
    1ac6:	5f e3       	ldi	r21, 0x3F	; 63
    1ac8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aca:	7c a1       	ldd	r23, Y+36	; 0x24
    1acc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ace:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <display_warning+0x1ba>
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	98 a7       	std	Y+40, r25	; 0x28
    1ade:	8f a3       	std	Y+39, r24	; 0x27
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <display_warning+0x238>
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	4f e7       	ldi	r20, 0x7F	; 127
    1ae8:	57 e4       	ldi	r21, 0x47	; 71
    1aea:	6b a1       	ldd	r22, Y+35	; 0x23
    1aec:	7c a1       	ldd	r23, Y+36	; 0x24
    1aee:	8d a1       	ldd	r24, Y+37	; 0x25
    1af0:	9e a1       	ldd	r25, Y+38	; 0x26
    1af2:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
    1af6:	18 16       	cp	r1, r24
    1af8:	4c f5       	brge	.+82     	; 0x1b4c <display_warning+0x224>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	69 81       	ldd	r22, Y+1	; 0x01
    1b04:	7a 81       	ldd	r23, Y+2	; 0x02
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	98 a7       	std	Y+40, r25	; 0x28
    1b20:	8f a3       	std	Y+39, r24	; 0x27
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <display_warning+0x21a>
    1b24:	88 ec       	ldi	r24, 0xC8	; 200
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9a a7       	std	Y+42, r25	; 0x2a
    1b2a:	89 a7       	std	Y+41, r24	; 0x29
    1b2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <display_warning+0x208>
    1b34:	9a a7       	std	Y+42, r25	; 0x2a
    1b36:	89 a7       	std	Y+41, r24	; 0x29
    1b38:	8f a1       	ldd	r24, Y+39	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3a:	98 a5       	ldd	r25, Y+40	; 0x28
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	98 a7       	std	Y+40, r25	; 0x28
    1b40:	8f a3       	std	Y+39, r24	; 0x27
    1b42:	8f a1       	ldd	r24, Y+39	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	98 a5       	ldd	r25, Y+40	; 0x28
    1b46:	89 2b       	or	r24, r25
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <display_warning+0x1fc>
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <display_warning+0x24c>
    1b4c:	6b a1       	ldd	r22, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b50:	8d a1       	ldd	r24, Y+37	; 0x25
    1b52:	9e a1       	ldd	r25, Y+38	; 0x26
    1b54:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	98 a7       	std	Y+40, r25	; 0x28
    1b5e:	8f a3       	std	Y+39, r24	; 0x27
    1b60:	8f a1       	ldd	r24, Y+39	; 0x27
    1b62:	98 a5       	ldd	r25, Y+40	; 0x28
    1b64:	9c a7       	std	Y+44, r25	; 0x2c
    1b66:	8b a7       	std	Y+43, r24	; 0x2b
    1b68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <display_warning+0x244>
    1b70:	9c a7       	std	Y+44, r25	; 0x2c
    1b72:	8b a7       	std	Y+43, r24	; 0x2b
    1b74:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
		_delay_ms(3000);
		clear_display();
    1b78:	0e 94 bf 02 	call	0x57e	; 0x57e <diod_reset>
		diod_reset();
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
		warning_active = 1;
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <warning_active+0x1>
    1b84:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <warning_active>
    1b88:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <sensor_brightness>
	}
	
	if(sensor_brightness > 4200){
    1b8c:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <sensor_brightness+0x1>
    1b90:	89 36       	cpi	r24, 0x69	; 105
    1b92:	90 41       	sbci	r25, 0x10	; 16
    1b94:	0c f4       	brge	.+2      	; 0x1b98 <display_warning+0x270>
    1b96:	86 c0       	rjmp	.+268    	; 0x1ca4 <display_warning+0x37c>
		diod_active();
    1b98:	0e 94 ad 02 	call	0x55a	; 0x55a <diod_active>
		write_str_display("Watch out ");
    1b9c:	87 e2       	ldi	r24, 0x27	; 39
    1b9e:	91 e0       	ldi	r25, 0x01	; 1
    1ba0:	8e d8       	rcall	.-3812   	; 0xcbe <write_str_display>
		display_line_bottom();
    1ba2:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("for glare!");
    1ba6:	8f e4       	ldi	r24, 0x4F	; 79
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	89 d8       	rcall	.-3822   	; 0xcbe <write_str_display>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e8       	ldi	r25, 0x80	; 128
    1bb0:	ab e3       	ldi	r26, 0x3B	; 59
    1bb2:	b5 e4       	ldi	r27, 0x45	; 69
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	af 83       	std	Y+7, r26	; 0x07
    1bba:	b8 87       	std	Y+8, r27	; 0x08
    1bbc:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a ef       	ldi	r20, 0xFA	; 250
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	6d 81       	ldd	r22, Y+5	; 0x05
    1bc6:	7e 81       	ldd	r23, Y+6	; 0x06
    1bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bca:	98 85       	ldd	r25, Y+8	; 0x08
    1bcc:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8d a7       	std	Y+45, r24	; 0x2d
    1bd6:	9e a7       	std	Y+46, r25	; 0x2e
    1bd8:	af a7       	std	Y+47, r26	; 0x2f
    1bda:	b8 ab       	std	Y+48, r27	; 0x30
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	6d a5       	ldd	r22, Y+45	; 0x2d
    1be6:	7e a5       	ldd	r23, Y+46	; 0x2e
    1be8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bea:	98 a9       	ldd	r25, Y+48	; 0x30
    1bec:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <display_warning+0x2d6>
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9a ab       	std	Y+50, r25	; 0x32
    1bfa:	89 ab       	std	Y+49, r24	; 0x31
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <display_warning+0x354>
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c08:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0e:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <display_warning+0x340>
    1c16:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c20:	7e 81       	ldd	r23, Y+6	; 0x06
    1c22:	8f 81       	ldd	r24, Y+7	; 0x07
    1c24:	98 85       	ldd	r25, Y+8	; 0x08
    1c26:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9a ab       	std	Y+50, r25	; 0x32
    1c3c:	89 ab       	std	Y+49, r24	; 0x31
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <display_warning+0x336>
    1c40:	88 ec       	ldi	r24, 0xC8	; 200
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c ab       	std	Y+52, r25	; 0x34
    1c46:	8b ab       	std	Y+51, r24	; 0x33
    1c48:	8b a9       	ldd	r24, Y+51	; 0x33
    1c4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <display_warning+0x324>
    1c50:	9c ab       	std	Y+52, r25	; 0x34
    1c52:	8b ab       	std	Y+51, r24	; 0x33
    1c54:	89 a9       	ldd	r24, Y+49	; 0x31
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	9a a9       	ldd	r25, Y+50	; 0x32
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9a ab       	std	Y+50, r25	; 0x32
    1c5c:	89 ab       	std	Y+49, r24	; 0x31
    1c5e:	89 a9       	ldd	r24, Y+49	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	9a a9       	ldd	r25, Y+50	; 0x32
    1c62:	89 2b       	or	r24, r25
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <display_warning+0x318>
    1c66:	14 c0       	rjmp	.+40     	; 0x1c90 <display_warning+0x368>
    1c68:	6d a5       	ldd	r22, Y+45	; 0x2d
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c70:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9a ab       	std	Y+50, r25	; 0x32
    1c7a:	89 ab       	std	Y+49, r24	; 0x31
    1c7c:	89 a9       	ldd	r24, Y+49	; 0x31
    1c7e:	9a a9       	ldd	r25, Y+50	; 0x32
    1c80:	9e ab       	std	Y+54, r25	; 0x36
    1c82:	8d ab       	std	Y+53, r24	; 0x35
    1c84:	8d a9       	ldd	r24, Y+53	; 0x35
    1c86:	9e a9       	ldd	r25, Y+54	; 0x36
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <display_warning+0x360>
    1c8c:	9e ab       	std	Y+54, r25	; 0x36
    1c8e:	8d ab       	std	Y+53, r24	; 0x35
    1c90:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
		_delay_ms(3000);
		clear_display();
    1c94:	0e 94 bf 02 	call	0x57e	; 0x57e <diod_reset>
		diod_reset();
    1c98:	81 e0       	ldi	r24, 0x01	; 1
		warning_active = 1;
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <warning_active+0x1>
    1ca0:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <warning_active>
    1ca4:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <sensor_brightness>
	}
	
	if(sensor_brightness < 4000){
    1ca8:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <sensor_brightness+0x1>
    1cac:	80 3a       	cpi	r24, 0xA0	; 160
    1cae:	9f 40       	sbci	r25, 0x0F	; 15
    1cb0:	0c f0       	brlt	.+2      	; 0x1cb4 <display_warning+0x38c>
    1cb2:	8e c0       	rjmp	.+284    	; 0x1dd0 <display_warning+0x4a8>
		diod_active();
    1cb4:	0e 94 ad 02 	call	0x55a	; 0x55a <diod_active>
		write_str_display("Too dark ");
    1cb8:	8a e5       	ldi	r24, 0x5A	; 90
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	00 d8       	rcall	.-4096   	; 0xcbe <write_str_display>
    1cbe:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		display_line_bottom();
    1cc2:	84 e6       	ldi	r24, 0x64	; 100
		write_str_display("to see!");
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
    1cc6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e8       	ldi	r25, 0x80	; 128
    1cce:	ab e3       	ldi	r26, 0x3B	; 59
    1cd0:	b5 e4       	ldi	r27, 0x45	; 69
    1cd2:	89 87       	std	Y+9, r24	; 0x09
    1cd4:	9a 87       	std	Y+10, r25	; 0x0a
    1cd6:	ab 87       	std	Y+11, r26	; 0x0b
    1cd8:	bc 87       	std	Y+12, r27	; 0x0c
    1cda:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a ef       	ldi	r20, 0xFA	; 250
    1ce0:	54 e4       	ldi	r21, 0x44	; 68
    1ce2:	69 85       	ldd	r22, Y+9	; 0x09
    1ce4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ce6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ce8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cea:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8f ab       	std	Y+55, r24	; 0x37
    1cf4:	98 af       	std	Y+56, r25	; 0x38
    1cf6:	a9 af       	std	Y+57, r26	; 0x39
    1cf8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	6f a9       	ldd	r22, Y+55	; 0x37
    1d04:	78 ad       	ldd	r23, Y+56	; 0x38
    1d06:	89 ad       	ldd	r24, Y+57	; 0x39
    1d08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d0a:	7b d7       	rcall	.+3830   	; 0x2c02 <__cmpsf2>
    1d0c:	88 23       	and	r24, r24
    1d0e:	2c f4       	brge	.+10     	; 0x1d1a <display_warning+0x3f2>
    1d10:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9c af       	std	Y+60, r25	; 0x3c
    1d16:	8b af       	std	Y+59, r24	; 0x3b
    1d18:	3d c0       	rjmp	.+122    	; 0x1d94 <display_warning+0x46c>
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	6f a9       	ldd	r22, Y+55	; 0x37
    1d24:	78 ad       	ldd	r23, Y+56	; 0x38
    1d26:	89 ad       	ldd	r24, Y+57	; 0x39
    1d28:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d2a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	44 f5       	brge	.+80     	; 0x1d82 <display_warning+0x45a>
    1d32:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	69 85       	ldd	r22, Y+9	; 0x09
    1d3c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d40:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d42:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	ca d7       	rcall	.+3988   	; 0x2ce4 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9c af       	std	Y+60, r25	; 0x3c
    1d56:	8b af       	std	Y+59, r24	; 0x3b
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <display_warning+0x450>
    1d5a:	88 ec       	ldi	r24, 0xC8	; 200
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9e af       	std	Y+62, r25	; 0x3e
    1d60:	8d af       	std	Y+61, r24	; 0x3d
    1d62:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d64:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <display_warning+0x43e>
    1d6a:	9e af       	std	Y+62, r25	; 0x3e
    1d6c:	8d af       	std	Y+61, r24	; 0x3d
    1d6e:	8b ad       	ldd	r24, Y+59	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d70:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9c af       	std	Y+60, r25	; 0x3c
    1d76:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d7c:	89 2b       	or	r24, r25
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <display_warning+0x432>
    1d80:	1d c0       	rjmp	.+58     	; 0x1dbc <display_warning+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6f a9       	ldd	r22, Y+55	; 0x37
    1d84:	78 ad       	ldd	r23, Y+56	; 0x38
    1d86:	89 ad       	ldd	r24, Y+57	; 0x39
    1d88:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d8a:	ac d7       	rcall	.+3928   	; 0x2ce4 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9c af       	std	Y+60, r25	; 0x3c
    1d92:	8b af       	std	Y+59, r24	; 0x3b
    1d94:	2b ad       	ldd	r18, Y+59	; 0x3b
    1d96:	3c ad       	ldd	r19, Y+60	; 0x3c
    1d98:	ce 01       	movw	r24, r28
    1d9a:	cf 96       	adiw	r24, 0x3f	; 63
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	31 83       	std	Z+1, r19	; 0x01
    1da0:	20 83       	st	Z, r18
    1da2:	ce 01       	movw	r24, r28
    1da4:	cf 96       	adiw	r24, 0x3f	; 63
    1da6:	fc 01       	movw	r30, r24
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <display_warning+0x484>
    1db0:	9e 01       	movw	r18, r28
    1db2:	21 5c       	subi	r18, 0xC1	; 193
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	f9 01       	movw	r30, r18
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
    1dbc:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
		_delay_ms(3000);
		clear_display();
    1dc0:	0e 94 bf 02 	call	0x57e	; 0x57e <diod_reset>
		diod_reset();
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
		warning_active = 1;
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <warning_active+0x1>
    1dcc:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <warning_active>
    1dd0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <sensor_humidity>
	}
	
	if(sensor_humidity < 20){
    1dd4:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <sensor_humidity+0x1>
    1dd8:	44 97       	sbiw	r24, 0x14	; 20
    1dda:	0c f0       	brlt	.+2      	; 0x1dde <display_warning+0x4b6>
    1ddc:	cb c0       	rjmp	.+406    	; 0x1f74 <display_warning+0x64c>
    1dde:	0e 94 ad 02 	call	0x55a	; 0x55a <diod_active>
		diod_active();
    1de2:	8c e6       	ldi	r24, 0x6C	; 108
		write_str_display("Air too ");
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
    1dea:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		display_line_bottom();
    1dee:	85 e7       	ldi	r24, 0x75	; 117
		write_str_display("dry!");
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e8       	ldi	r25, 0x80	; 128
    1dfa:	ab e3       	ldi	r26, 0x3B	; 59
    1dfc:	b5 e4       	ldi	r27, 0x45	; 69
    1dfe:	8d 87       	std	Y+13, r24	; 0x0d
    1e00:	9e 87       	std	Y+14, r25	; 0x0e
    1e02:	af 87       	std	Y+15, r26	; 0x0f
    1e04:	b8 8b       	std	Y+16, r27	; 0x10
    1e06:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	0f 5b       	subi	r16, 0xBF	; 191
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a ef       	ldi	r20, 0xFA	; 250
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e16:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1a:	98 89       	ldd	r25, Y+16	; 0x10
    1e1c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	f8 01       	movw	r30, r16
    1e26:	80 83       	st	Z, r24
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	a2 83       	std	Z+2, r26	; 0x02
    1e2c:	b3 83       	std	Z+3, r27	; 0x03
    1e2e:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    1e30:	8f 5b       	subi	r24, 0xBF	; 191
    1e32:	9f 4f       	sbci	r25, 0xFF	; 255
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e8       	ldi	r20, 0x80	; 128
    1e3a:	5f e3       	ldi	r21, 0x3F	; 63
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	60 81       	ld	r22, Z
    1e40:	71 81       	ldd	r23, Z+1	; 0x01
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	dd d6       	rcall	.+3514   	; 0x2c02 <__cmpsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	4c f4       	brge	.+18     	; 0x1e5e <display_warning+0x536>
    1e4c:	ce 01       	movw	r24, r28
		__ticks = 1;
    1e4e:	8b 5b       	subi	r24, 0xBB	; 187
    1e50:	9f 4f       	sbci	r25, 0xFF	; 255
    1e52:	21 e0       	ldi	r18, 0x01	; 1
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	fc 01       	movw	r30, r24
    1e58:	31 83       	std	Z+1, r19	; 0x01
    1e5a:	20 83       	st	Z, r18
    1e5c:	67 c0       	rjmp	.+206    	; 0x1f2c <display_warning+0x604>
    1e5e:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
    1e60:	8f 5b       	subi	r24, 0xBF	; 191
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__gesf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	0c f0       	brlt	.+2      	; 0x1e80 <display_warning+0x558>
    1e7e:	45 c0       	rjmp	.+138    	; 0x1f0a <display_warning+0x5e2>
    1e80:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e8a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8e:	98 89       	ldd	r25, Y+16	; 0x10
    1e90:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8e 01       	movw	r16, r28
    1e9a:	0b 5b       	subi	r16, 0xBB	; 187
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	20 d7       	rcall	.+3648   	; 0x2ce4 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
    1eae:	24 c0       	rjmp	.+72     	; 0x1ef8 <display_warning+0x5d0>
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	89 5b       	subi	r24, 0xB9	; 185
    1eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb6:	28 ec       	ldi	r18, 0xC8	; 200
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	fc 01       	movw	r30, r24
    1ebc:	31 83       	std	Z+1, r19	; 0x01
    1ebe:	20 83       	st	Z, r18
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	89 5b       	subi	r24, 0xB9	; 185
    1ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <display_warning+0x5a4>
    1ed0:	9e 01       	movw	r18, r28
    1ed2:	29 5b       	subi	r18, 0xB9	; 185
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	f9 01       	movw	r30, r18
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
    1edc:	ce 01       	movw	r24, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ede:	8b 5b       	subi	r24, 0xBB	; 187
    1ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee2:	9e 01       	movw	r18, r28
    1ee4:	2b 5b       	subi	r18, 0xBB	; 187
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	f9 01       	movw	r30, r18
    1eea:	20 81       	ld	r18, Z
    1eec:	31 81       	ldd	r19, Z+1	; 0x01
    1eee:	21 50       	subi	r18, 0x01	; 1
    1ef0:	31 09       	sbc	r19, r1
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	31 83       	std	Z+1, r19	; 0x01
    1ef6:	20 83       	st	Z, r18
    1ef8:	ce 01       	movw	r24, r28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	8b 5b       	subi	r24, 0xBB	; 187
    1efc:	9f 4f       	sbci	r25, 0xFF	; 255
    1efe:	fc 01       	movw	r30, r24
    1f00:	80 81       	ld	r24, Z
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	89 2b       	or	r24, r25
    1f06:	a1 f6       	brne	.-88     	; 0x1eb0 <display_warning+0x588>
    1f08:	2b c0       	rjmp	.+86     	; 0x1f60 <display_warning+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	0b 5b       	subi	r16, 0xBB	; 187
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	ce 01       	movw	r24, r28
    1f12:	8f 5b       	subi	r24, 0xBF	; 191
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	fc 01       	movw	r30, r24
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	e1 d6       	rcall	.+3522   	; 0x2ce4 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	f8 01       	movw	r30, r16
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	80 83       	st	Z, r24
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	87 5b       	subi	r24, 0xB7	; 183
    1f30:	9f 4f       	sbci	r25, 0xFF	; 255
    1f32:	9e 01       	movw	r18, r28
    1f34:	2b 5b       	subi	r18, 0xBB	; 187
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	f9 01       	movw	r30, r18
    1f3a:	20 81       	ld	r18, Z
    1f3c:	31 81       	ldd	r19, Z+1	; 0x01
    1f3e:	fc 01       	movw	r30, r24
    1f40:	31 83       	std	Z+1, r19	; 0x01
    1f42:	20 83       	st	Z, r18
    1f44:	ce 01       	movw	r24, r28
    1f46:	87 5b       	subi	r24, 0xB7	; 183
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <display_warning+0x628>
    1f54:	9e 01       	movw	r18, r28
    1f56:	27 5b       	subi	r18, 0xB7	; 183
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	f9 01       	movw	r30, r18
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
    1f60:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
		_delay_ms(3000);
		clear_display();
    1f64:	0e 94 bf 02 	call	0x57e	; 0x57e <diod_reset>
		diod_reset();
    1f68:	81 e0       	ldi	r24, 0x01	; 1
		warning_active = 1;
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <warning_active+0x1>
    1f70:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <warning_active>
    1f74:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <sensor_humidity>
	}
	
	if(sensor_humidity > 70){
    1f78:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <sensor_humidity+0x1>
    1f7c:	87 34       	cpi	r24, 0x47	; 71
    1f7e:	91 05       	cpc	r25, r1
    1f80:	0c f4       	brge	.+2      	; 0x1f84 <display_warning+0x65c>
    1f82:	c8 c0       	rjmp	.+400    	; 0x2114 <display_warning+0x7ec>
    1f84:	0e 94 ad 02 	call	0x55a	; 0x55a <diod_active>
		diod_active();
    1f88:	8a e7       	ldi	r24, 0x7A	; 122
		write_str_display("Hard to ");
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
    1f90:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		display_line_bottom();
    1f94:	83 e8       	ldi	r24, 0x83	; 131
		write_str_display("breath!");
    1f96:	91 e0       	ldi	r25, 0x01	; 1
    1f98:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e8       	ldi	r25, 0x80	; 128
    1fa0:	ab e3       	ldi	r26, 0x3B	; 59
    1fa2:	b5 e4       	ldi	r27, 0x45	; 69
    1fa4:	89 8b       	std	Y+17, r24	; 0x11
    1fa6:	9a 8b       	std	Y+18, r25	; 0x12
    1fa8:	ab 8b       	std	Y+19, r26	; 0x13
    1faa:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	8e 01       	movw	r16, r28
    1fae:	05 5b       	subi	r16, 0xB5	; 181
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4a ef       	ldi	r20, 0xFA	; 250
    1fb8:	54 e4       	ldi	r21, 0x44	; 68
    1fba:	69 89       	ldd	r22, Y+17	; 0x11
    1fbc:	7a 89       	ldd	r23, Y+18	; 0x12
    1fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc2:	72 d7       	rcall	.+3812   	; 0x2ea8 <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	f8 01       	movw	r30, r16
    1fca:	80 83       	st	Z, r24
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	a2 83       	std	Z+2, r26	; 0x02
    1fd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	85 5b       	subi	r24, 0xB5	; 181
    1fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	60 81       	ld	r22, Z
    1fe4:	71 81       	ldd	r23, Z+1	; 0x01
    1fe6:	82 81       	ldd	r24, Z+2	; 0x02
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	0b d6       	rcall	.+3094   	; 0x2c02 <__cmpsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	4c f4       	brge	.+18     	; 0x2002 <display_warning+0x6da>
    1ff0:	ce 01       	movw	r24, r28
		__ticks = 1;
    1ff2:	81 5b       	subi	r24, 0xB1	; 177
    1ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff6:	21 e0       	ldi	r18, 0x01	; 1
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	31 83       	std	Z+1, r19	; 0x01
    1ffe:	20 83       	st	Z, r18
    2000:	65 c0       	rjmp	.+202    	; 0x20cc <display_warning+0x7a4>
	else if (__tmp > 65535)
    2002:	ce 01       	movw	r24, r28
    2004:	85 5b       	subi	r24, 0xB5	; 181
    2006:	9f 4f       	sbci	r25, 0xFF	; 255
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	fc 01       	movw	r30, r24
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	42 d7       	rcall	.+3716   	; 0x2ea0 <__gesf2>
    201c:	18 16       	cp	r1, r24
    201e:	0c f0       	brlt	.+2      	; 0x2022 <display_warning+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	44 c0       	rjmp	.+136    	; 0x20aa <display_warning+0x782>
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	69 89       	ldd	r22, Y+17	; 0x11
    202c:	7a 89       	ldd	r23, Y+18	; 0x12
    202e:	8b 89       	ldd	r24, Y+19	; 0x13
    2030:	9c 89       	ldd	r25, Y+20	; 0x14
    2032:	3a d7       	rcall	.+3700   	; 0x2ea8 <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8e 01       	movw	r16, r28
    203a:	01 5b       	subi	r16, 0xB1	; 177
    203c:	1f 4f       	sbci	r17, 0xFF	; 255
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	50 d6       	rcall	.+3232   	; 0x2ce4 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	f8 01       	movw	r30, r16
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
    204e:	24 c0       	rjmp	.+72     	; 0x2098 <display_warning+0x770>
    2050:	ce 01       	movw	r24, r28
    2052:	8f 5a       	subi	r24, 0xAF	; 175
    2054:	9f 4f       	sbci	r25, 0xFF	; 255
    2056:	28 ec       	ldi	r18, 0xC8	; 200
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	fc 01       	movw	r30, r24
    205c:	31 83       	std	Z+1, r19	; 0x01
    205e:	20 83       	st	Z, r18
    2060:	ce 01       	movw	r24, r28
    2062:	8f 5a       	subi	r24, 0xAF	; 175
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	fc 01       	movw	r30, r24
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <display_warning+0x744>
    2070:	9e 01       	movw	r18, r28
    2072:	2f 5a       	subi	r18, 0xAF	; 175
    2074:	3f 4f       	sbci	r19, 0xFF	; 255
    2076:	f9 01       	movw	r30, r18
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
    207c:	ce 01       	movw	r24, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207e:	81 5b       	subi	r24, 0xB1	; 177
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	9e 01       	movw	r18, r28
    2084:	21 5b       	subi	r18, 0xB1	; 177
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	f9 01       	movw	r30, r18
    208a:	20 81       	ld	r18, Z
    208c:	31 81       	ldd	r19, Z+1	; 0x01
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	31 09       	sbc	r19, r1
    2092:	fc 01       	movw	r30, r24
    2094:	31 83       	std	Z+1, r19	; 0x01
    2096:	20 83       	st	Z, r18
    2098:	ce 01       	movw	r24, r28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	81 5b       	subi	r24, 0xB1	; 177
    209c:	9f 4f       	sbci	r25, 0xFF	; 255
    209e:	fc 01       	movw	r30, r24
    20a0:	80 81       	ld	r24, Z
    20a2:	91 81       	ldd	r25, Z+1	; 0x01
    20a4:	89 2b       	or	r24, r25
    20a6:	a1 f6       	brne	.-88     	; 0x2050 <display_warning+0x728>
    20a8:	2b c0       	rjmp	.+86     	; 0x2100 <display_warning+0x7d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	8e 01       	movw	r16, r28
    20ac:	01 5b       	subi	r16, 0xB1	; 177
    20ae:	1f 4f       	sbci	r17, 0xFF	; 255
    20b0:	ce 01       	movw	r24, r28
    20b2:	85 5b       	subi	r24, 0xB5	; 181
    20b4:	9f 4f       	sbci	r25, 0xFF	; 255
    20b6:	fc 01       	movw	r30, r24
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	11 d6       	rcall	.+3106   	; 0x2ce4 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	f8 01       	movw	r30, r16
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
    20cc:	ce 01       	movw	r24, r28
    20ce:	8d 5a       	subi	r24, 0xAD	; 173
    20d0:	9f 4f       	sbci	r25, 0xFF	; 255
    20d2:	9e 01       	movw	r18, r28
    20d4:	21 5b       	subi	r18, 0xB1	; 177
    20d6:	3f 4f       	sbci	r19, 0xFF	; 255
    20d8:	f9 01       	movw	r30, r18
    20da:	20 81       	ld	r18, Z
    20dc:	31 81       	ldd	r19, Z+1	; 0x01
    20de:	fc 01       	movw	r30, r24
    20e0:	31 83       	std	Z+1, r19	; 0x01
    20e2:	20 83       	st	Z, r18
    20e4:	ce 01       	movw	r24, r28
    20e6:	8d 5a       	subi	r24, 0xAD	; 173
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	fc 01       	movw	r30, r24
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <display_warning+0x7c8>
    20f4:	9e 01       	movw	r18, r28
    20f6:	2d 5a       	subi	r18, 0xAD	; 173
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	f9 01       	movw	r30, r18
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
    2100:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
		_delay_ms(3000);
		clear_display();
    2104:	0e 94 bf 02 	call	0x57e	; 0x57e <diod_reset>
		diod_reset();
    2108:	81 e0       	ldi	r24, 0x01	; 1
		warning_active = 1;
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <warning_active+0x1>
    2110:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <warning_active>
    2114:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <warning_active>
	}
	
	if(warning_active == 0){
    2118:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <warning_active+0x1>
    211c:	89 2b       	or	r24, r25
    211e:	29 f4       	brne	.+10     	; 0x212a <display_warning+0x802>
    2120:	8b e8       	ldi	r24, 0x8B	; 139
		write_str_display("No warnings!");
    2122:	91 e0       	ldi	r25, 0x01	; 1
    2124:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
    2128:	0a c0       	rjmp	.+20     	; 0x213e <display_warning+0x816>
		write_str_display("All warnings");
		display_line_bottom();
		write_str_display("displayed!");
	}
	
    212a:	88 e9       	ldi	r24, 0x98	; 152
	}
	
	if(warning_active == 0){
		write_str_display("No warnings!");
		}else{
		write_str_display("All warnings");
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
    2132:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		display_line_bottom();
    2136:	85 ea       	ldi	r24, 0xA5	; 165
		write_str_display("displayed!");
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
    213e:	00 00       	nop
	}
	
    2140:	cc 5a       	subi	r28, 0xAC	; 172
    2142:	df 4f       	sbci	r29, 0xFF	; 255
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	08 95       	ret

00002158 <time_init>:

/* Header Files Post Libraries */
#include "time.h"

/* Body */
void time_init(){
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	time_param_index = -1;
    2160:	8f ef       	ldi	r24, 0xFF	; 255
    2162:	9f ef       	ldi	r25, 0xFF	; 255
    2164:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <time_param_index+0x1>
    2168:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <time_param_index>
	time_param_year = YEAR;
    216c:	8b e2       	ldi	r24, 0x2B	; 43
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <time_param_year+0x1>
    2174:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_param_year>
	time_param_month = MONTH;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <time_param_month+0x1>
    2180:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <time_param_month>
	time_param_day = DAY;
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <time_param_day+0x1>
    218c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <time_param_day>
	time_param_hour = HOUR;
    2190:	83 e0       	ldi	r24, 0x03	; 3
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <time_param_hour+0x1>
    2198:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <time_param_hour>
	time_param_minute = MINUTE;
    219c:	84 e0       	ldi	r24, 0x04	; 4
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <time_param_minute+0x1>
    21a4:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <time_param_minute>
	time_param_second = SECOND;
    21a8:	85 e0       	ldi	r24, 0x05	; 5
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <time_param_second+0x1>
    21b0:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <time_param_second>
	
	time_set = 0;
    21b4:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <time_set+0x1>
    21b8:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <time_set>
}
    21bc:	00 00       	nop
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	08 95       	ret

000021c4 <set_time_param>:

void set_time_param(){
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
	clear_display();
    21cc:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
	time_param_index++;
    21d0:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <time_param_index>
    21d4:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <time_param_index+0x1>
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <time_param_index+0x1>
    21de:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <time_param_index>
	
	switch (time_param_index){
    21e2:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <time_param_index>
    21e6:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <time_param_index+0x1>
    21ea:	82 30       	cpi	r24, 0x02	; 2
    21ec:	91 05       	cpc	r25, r1
    21ee:	b9 f1       	breq	.+110    	; 0x225e <set_time_param+0x9a>
    21f0:	83 30       	cpi	r24, 0x03	; 3
    21f2:	91 05       	cpc	r25, r1
    21f4:	2c f4       	brge	.+10     	; 0x2200 <set_time_param+0x3c>
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	71 f0       	breq	.+28     	; 0x2216 <set_time_param+0x52>
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f9 f0       	breq	.+62     	; 0x223c <set_time_param+0x78>
    21fe:	73 c0       	rjmp	.+230    	; 0x22e6 <set_time_param+0x122>
    2200:	84 30       	cpi	r24, 0x04	; 4
    2202:	91 05       	cpc	r25, r1
    2204:	09 f4       	brne	.+2      	; 0x2208 <set_time_param+0x44>
    2206:	4d c0       	rjmp	.+154    	; 0x22a2 <set_time_param+0xde>
    2208:	84 30       	cpi	r24, 0x04	; 4
    220a:	91 05       	cpc	r25, r1
    220c:	cc f1       	brlt	.+114    	; 0x2280 <set_time_param+0xbc>
    220e:	05 97       	sbiw	r24, 0x05	; 5
    2210:	09 f4       	brne	.+2      	; 0x2214 <set_time_param+0x50>
    2212:	58 c0       	rjmp	.+176    	; 0x22c4 <set_time_param+0x100>
    2214:	68 c0       	rjmp	.+208    	; 0x22e6 <set_time_param+0x122>
		case 0:
		write_str_display("Year selected");
    2216:	80 eb       	ldi	r24, 0xB0	; 176
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		display_line_bottom();
    221e:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    2222:	8e eb       	ldi	r24, 0xBE	; 190
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(2000 + time_param_year);
    222a:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_param_year>
    222e:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <time_param_year+0x1>
    2232:	80 53       	subi	r24, 0x30	; 48
    2234:	98 4f       	sbci	r25, 0xF8	; 248
    2236:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    223a:	5c c0       	rjmp	.+184    	; 0x22f4 <set_time_param+0x130>
		case 1:
		write_str_display("Month selected");
    223c:	88 ec       	ldi	r24, 0xC8	; 200
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		display_line_bottom();
    2244:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    2248:	8e eb       	ldi	r24, 0xBE	; 190
    224a:	91 e0       	ldi	r25, 0x01	; 1
    224c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_month);
    2250:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_param_month>
    2254:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_param_month+0x1>
    2258:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    225c:	4b c0       	rjmp	.+150    	; 0x22f4 <set_time_param+0x130>
		case 2:
		write_str_display("Day selected");
    225e:	87 ed       	ldi	r24, 0xD7	; 215
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		display_line_bottom();
    2266:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    226a:	8e eb       	ldi	r24, 0xBE	; 190
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_day);
    2272:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <time_param_day>
    2276:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <time_param_day+0x1>
    227a:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    227e:	3a c0       	rjmp	.+116    	; 0x22f4 <set_time_param+0x130>
		case 3:
		write_str_display("Hour selected");
    2280:	84 ee       	ldi	r24, 0xE4	; 228
    2282:	91 e0       	ldi	r25, 0x01	; 1
    2284:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		display_line_bottom();
    2288:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    228c:	8e eb       	ldi	r24, 0xBE	; 190
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_hour);
    2294:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <time_param_hour>
    2298:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <time_param_hour+0x1>
    229c:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    22a0:	29 c0       	rjmp	.+82     	; 0x22f4 <set_time_param+0x130>
		case 4:
		write_str_display("Minute selected");
    22a2:	82 ef       	ldi	r24, 0xF2	; 242
    22a4:	91 e0       	ldi	r25, 0x01	; 1
    22a6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		display_line_bottom();
    22aa:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    22ae:	8e eb       	ldi	r24, 0xBE	; 190
    22b0:	91 e0       	ldi	r25, 0x01	; 1
    22b2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_minute);
    22b6:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <time_param_minute>
    22ba:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <time_param_minute+0x1>
    22be:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    22c2:	18 c0       	rjmp	.+48     	; 0x22f4 <set_time_param+0x130>
		case 5:
		write_str_display("Second selected");
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	92 e0       	ldi	r25, 0x02	; 2
    22c8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		display_line_bottom();
    22cc:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    22d0:	8e eb       	ldi	r24, 0xBE	; 190
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_second);
    22d8:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <time_param_second>
    22dc:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <time_param_second+0x1>
    22e0:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    22e4:	07 c0       	rjmp	.+14     	; 0x22f4 <set_time_param+0x130>
		default:
		time_param_index = -1;
    22e6:	8f ef       	ldi	r24, 0xFF	; 255
    22e8:	9f ef       	ldi	r25, 0xFF	; 255
    22ea:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <time_param_index+0x1>
    22ee:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <time_param_index>
		set_time_param();
    22f2:	68 df       	rcall	.-304    	; 0x21c4 <set_time_param>
	}
	
}
    22f4:	00 00       	nop
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <increment_time_param>:

void increment_time_param(){
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
	clear_display();
    2304:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
	
	switch (time_param_index){
    2308:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <time_param_index>
    230c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <time_param_index+0x1>
    2310:	82 30       	cpi	r24, 0x02	; 2
    2312:	91 05       	cpc	r25, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <increment_time_param+0x1c>
    2316:	55 c0       	rjmp	.+170    	; 0x23c2 <increment_time_param+0xc6>
    2318:	83 30       	cpi	r24, 0x03	; 3
    231a:	91 05       	cpc	r25, r1
    231c:	2c f4       	brge	.+10     	; 0x2328 <increment_time_param+0x2c>
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	79 f0       	breq	.+30     	; 0x2340 <increment_time_param+0x44>
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	49 f1       	breq	.+82     	; 0x2378 <increment_time_param+0x7c>
    2326:	e1 c0       	rjmp	.+450    	; 0x24ea <increment_time_param+0x1ee>
    2328:	84 30       	cpi	r24, 0x04	; 4
    232a:	91 05       	cpc	r25, r1
    232c:	09 f4       	brne	.+2      	; 0x2330 <increment_time_param+0x34>
    232e:	93 c0       	rjmp	.+294    	; 0x2456 <increment_time_param+0x15a>
    2330:	84 30       	cpi	r24, 0x04	; 4
    2332:	91 05       	cpc	r25, r1
    2334:	0c f4       	brge	.+2      	; 0x2338 <increment_time_param+0x3c>
    2336:	6a c0       	rjmp	.+212    	; 0x240c <increment_time_param+0x110>
    2338:	05 97       	sbiw	r24, 0x05	; 5
    233a:	09 f4       	brne	.+2      	; 0x233e <increment_time_param+0x42>
    233c:	b1 c0       	rjmp	.+354    	; 0x24a0 <increment_time_param+0x1a4>
    233e:	d5 c0       	rjmp	.+426    	; 0x24ea <increment_time_param+0x1ee>
		case 0:
		write_str_display("Year increased");
    2340:	82 e1       	ldi	r24, 0x12	; 18
    2342:	92 e0       	ldi	r25, 0x02	; 2
    2344:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_year++;
    2348:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_param_year>
    234c:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <time_param_year+0x1>
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <time_param_year+0x1>
    2356:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_param_year>
		display_line_bottom();
    235a:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    235e:	8e eb       	ldi	r24, 0xBE	; 190
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(2000 + time_param_year);
    2366:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_param_year>
    236a:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <time_param_year+0x1>
    236e:	80 53       	subi	r24, 0x30	; 48
    2370:	98 4f       	sbci	r25, 0xF8	; 248
    2372:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    2376:	bd c0       	rjmp	.+378    	; 0x24f2 <increment_time_param+0x1f6>
		case 1:
		if(time_param_month == 12){
    2378:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_param_month>
    237c:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_param_month+0x1>
    2380:	0c 97       	sbiw	r24, 0x0c	; 12
    2382:	29 f4       	brne	.+10     	; 0x238e <increment_time_param+0x92>
			write_str_display("Wrong input!");
    2384:	81 e2       	ldi	r24, 0x21	; 33
    2386:	92 e0       	ldi	r25, 0x02	; 2
    2388:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    238c:	b2 c0       	rjmp	.+356    	; 0x24f2 <increment_time_param+0x1f6>
		}
		
		write_str_display("Month increased");
    238e:	8e e2       	ldi	r24, 0x2E	; 46
    2390:	92 e0       	ldi	r25, 0x02	; 2
    2392:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_month++;
    2396:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_param_month>
    239a:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_param_month+0x1>
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <time_param_month+0x1>
    23a4:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <time_param_month>
		display_line_bottom();
    23a8:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    23ac:	8e eb       	ldi	r24, 0xBE	; 190
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_month);
    23b4:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_param_month>
    23b8:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_param_month+0x1>
    23bc:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    23c0:	98 c0       	rjmp	.+304    	; 0x24f2 <increment_time_param+0x1f6>
		case 2:
		if(time_param_day == 31){
    23c2:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <time_param_day>
    23c6:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <time_param_day+0x1>
    23ca:	4f 97       	sbiw	r24, 0x1f	; 31
    23cc:	29 f4       	brne	.+10     	; 0x23d8 <increment_time_param+0xdc>
			write_str_display("Wrong input!");
    23ce:	81 e2       	ldi	r24, 0x21	; 33
    23d0:	92 e0       	ldi	r25, 0x02	; 2
    23d2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    23d6:	8d c0       	rjmp	.+282    	; 0x24f2 <increment_time_param+0x1f6>
		}
		
		write_str_display("Day increased");
    23d8:	8e e3       	ldi	r24, 0x3E	; 62
    23da:	92 e0       	ldi	r25, 0x02	; 2
    23dc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_day++;
    23e0:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <time_param_day>
    23e4:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <time_param_day+0x1>
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <time_param_day+0x1>
    23ee:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <time_param_day>
		display_line_bottom();
    23f2:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    23f6:	8e eb       	ldi	r24, 0xBE	; 190
    23f8:	91 e0       	ldi	r25, 0x01	; 1
    23fa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_day);
    23fe:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <time_param_day>
    2402:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <time_param_day+0x1>
    2406:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    240a:	73 c0       	rjmp	.+230    	; 0x24f2 <increment_time_param+0x1f6>
		case 3:
		if(time_param_hour == 23){
    240c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <time_param_hour>
    2410:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <time_param_hour+0x1>
    2414:	47 97       	sbiw	r24, 0x17	; 23
    2416:	29 f4       	brne	.+10     	; 0x2422 <increment_time_param+0x126>
			write_str_display("Wrong input!");
    2418:	81 e2       	ldi	r24, 0x21	; 33
    241a:	92 e0       	ldi	r25, 0x02	; 2
    241c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    2420:	68 c0       	rjmp	.+208    	; 0x24f2 <increment_time_param+0x1f6>
		}
		
		write_str_display("Hour increased");
    2422:	8c e4       	ldi	r24, 0x4C	; 76
    2424:	92 e0       	ldi	r25, 0x02	; 2
    2426:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_hour++;
    242a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <time_param_hour>
    242e:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <time_param_hour+0x1>
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <time_param_hour+0x1>
    2438:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <time_param_hour>
		display_line_bottom();
    243c:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    2440:	8e eb       	ldi	r24, 0xBE	; 190
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_hour);
    2448:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <time_param_hour>
    244c:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <time_param_hour+0x1>
    2450:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    2454:	4e c0       	rjmp	.+156    	; 0x24f2 <increment_time_param+0x1f6>
		case 4:
		if(time_param_minute == 59){
    2456:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <time_param_minute>
    245a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <time_param_minute+0x1>
    245e:	cb 97       	sbiw	r24, 0x3b	; 59
    2460:	29 f4       	brne	.+10     	; 0x246c <increment_time_param+0x170>
			write_str_display("Wrong input!");
    2462:	81 e2       	ldi	r24, 0x21	; 33
    2464:	92 e0       	ldi	r25, 0x02	; 2
    2466:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    246a:	43 c0       	rjmp	.+134    	; 0x24f2 <increment_time_param+0x1f6>
		}
		
		write_str_display("Minute increased");
    246c:	8b e5       	ldi	r24, 0x5B	; 91
    246e:	92 e0       	ldi	r25, 0x02	; 2
    2470:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_minute++;
    2474:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <time_param_minute>
    2478:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <time_param_minute+0x1>
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <time_param_minute+0x1>
    2482:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <time_param_minute>
		display_line_bottom();
    2486:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    248a:	8e eb       	ldi	r24, 0xBE	; 190
    248c:	91 e0       	ldi	r25, 0x01	; 1
    248e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_minute);
    2492:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <time_param_minute>
    2496:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <time_param_minute+0x1>
    249a:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    249e:	29 c0       	rjmp	.+82     	; 0x24f2 <increment_time_param+0x1f6>
		case 5:
		if(time_param_second == 59){
    24a0:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <time_param_second>
    24a4:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <time_param_second+0x1>
    24a8:	cb 97       	sbiw	r24, 0x3b	; 59
    24aa:	29 f4       	brne	.+10     	; 0x24b6 <increment_time_param+0x1ba>
			write_str_display("Wrong input!");
    24ac:	81 e2       	ldi	r24, 0x21	; 33
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    24b4:	1e c0       	rjmp	.+60     	; 0x24f2 <increment_time_param+0x1f6>
		}
		
		write_str_display("Second increased");
    24b6:	8c e6       	ldi	r24, 0x6C	; 108
    24b8:	92 e0       	ldi	r25, 0x02	; 2
    24ba:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_second++;
    24be:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <time_param_second>
    24c2:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <time_param_second+0x1>
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <time_param_second+0x1>
    24cc:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <time_param_second>
		display_line_bottom();
    24d0:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    24d4:	8e eb       	ldi	r24, 0xBE	; 190
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_second);
    24dc:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <time_param_second>
    24e0:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <time_param_second+0x1>
    24e4:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    24e8:	04 c0       	rjmp	.+8      	; 0x24f2 <increment_time_param+0x1f6>
		default:
		write_str_display("Wrong time param");
    24ea:	8d e7       	ldi	r24, 0x7D	; 125
    24ec:	92 e0       	ldi	r25, 0x02	; 2
    24ee:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
	}
}
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	08 95       	ret

000024f8 <decrement_time_param>:

void decrement_time_param(){
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
	clear_display();
    2500:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
	
	switch (time_param_index){
    2504:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <time_param_index>
    2508:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <time_param_index+0x1>
    250c:	82 30       	cpi	r24, 0x02	; 2
    250e:	91 05       	cpc	r25, r1
    2510:	09 f4       	brne	.+2      	; 0x2514 <decrement_time_param+0x1c>
    2512:	60 c0       	rjmp	.+192    	; 0x25d4 <decrement_time_param+0xdc>
    2514:	83 30       	cpi	r24, 0x03	; 3
    2516:	91 05       	cpc	r25, r1
    2518:	2c f4       	brge	.+10     	; 0x2524 <decrement_time_param+0x2c>
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	79 f0       	breq	.+30     	; 0x253c <decrement_time_param+0x44>
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	a1 f1       	breq	.+104    	; 0x258a <decrement_time_param+0x92>
    2522:	ec c0       	rjmp	.+472    	; 0x26fc <decrement_time_param+0x204>
    2524:	84 30       	cpi	r24, 0x04	; 4
    2526:	91 05       	cpc	r25, r1
    2528:	09 f4       	brne	.+2      	; 0x252c <decrement_time_param+0x34>
    252a:	9e c0       	rjmp	.+316    	; 0x2668 <decrement_time_param+0x170>
    252c:	84 30       	cpi	r24, 0x04	; 4
    252e:	91 05       	cpc	r25, r1
    2530:	0c f4       	brge	.+2      	; 0x2534 <decrement_time_param+0x3c>
    2532:	75 c0       	rjmp	.+234    	; 0x261e <decrement_time_param+0x126>
    2534:	05 97       	sbiw	r24, 0x05	; 5
    2536:	09 f4       	brne	.+2      	; 0x253a <decrement_time_param+0x42>
    2538:	bc c0       	rjmp	.+376    	; 0x26b2 <decrement_time_param+0x1ba>
    253a:	e0 c0       	rjmp	.+448    	; 0x26fc <decrement_time_param+0x204>
		case 0:
		if(time_param_year == 0){
    253c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_param_year>
    2540:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <time_param_year+0x1>
    2544:	89 2b       	or	r24, r25
    2546:	29 f4       	brne	.+10     	; 0x2552 <decrement_time_param+0x5a>
			write_str_display("Wrong input!");
    2548:	81 e2       	ldi	r24, 0x21	; 33
    254a:	92 e0       	ldi	r25, 0x02	; 2
    254c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    2550:	d9 c0       	rjmp	.+434    	; 0x2704 <decrement_time_param+0x20c>
		}
		
		write_str_display("Year decreased");
    2552:	8e e8       	ldi	r24, 0x8E	; 142
    2554:	92 e0       	ldi	r25, 0x02	; 2
    2556:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_year--;
    255a:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_param_year>
    255e:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <time_param_year+0x1>
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <time_param_year+0x1>
    2568:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_param_year>
		display_line_bottom();
    256c:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    2570:	8e eb       	ldi	r24, 0xBE	; 190
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(2000 + time_param_year);
    2578:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_param_year>
    257c:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <time_param_year+0x1>
    2580:	80 53       	subi	r24, 0x30	; 48
    2582:	98 4f       	sbci	r25, 0xF8	; 248
    2584:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    2588:	bd c0       	rjmp	.+378    	; 0x2704 <decrement_time_param+0x20c>
		case 1:
		if(time_param_month == 1){
    258a:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_param_month>
    258e:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_param_month+0x1>
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	29 f4       	brne	.+10     	; 0x25a0 <decrement_time_param+0xa8>
			write_str_display("Wrong input!");
    2596:	81 e2       	ldi	r24, 0x21	; 33
    2598:	92 e0       	ldi	r25, 0x02	; 2
    259a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    259e:	b2 c0       	rjmp	.+356    	; 0x2704 <decrement_time_param+0x20c>
		}
		
		write_str_display("Month decreased");
    25a0:	8d e9       	ldi	r24, 0x9D	; 157
    25a2:	92 e0       	ldi	r25, 0x02	; 2
    25a4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_month--;
    25a8:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_param_month>
    25ac:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_param_month+0x1>
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <time_param_month+0x1>
    25b6:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <time_param_month>
		display_line_bottom();
    25ba:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    25be:	8e eb       	ldi	r24, 0xBE	; 190
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_month);
    25c6:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_param_month>
    25ca:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_param_month+0x1>
    25ce:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    25d2:	98 c0       	rjmp	.+304    	; 0x2704 <decrement_time_param+0x20c>
		case 2:
		if(time_param_day == 1){
    25d4:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <time_param_day>
    25d8:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <time_param_day+0x1>
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	29 f4       	brne	.+10     	; 0x25ea <decrement_time_param+0xf2>
			write_str_display("Wrong input!");
    25e0:	81 e2       	ldi	r24, 0x21	; 33
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    25e8:	8d c0       	rjmp	.+282    	; 0x2704 <decrement_time_param+0x20c>
		}
		
		write_str_display("Day decreased");
    25ea:	8d ea       	ldi	r24, 0xAD	; 173
    25ec:	92 e0       	ldi	r25, 0x02	; 2
    25ee:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_day--;
    25f2:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <time_param_day>
    25f6:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <time_param_day+0x1>
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <time_param_day+0x1>
    2600:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <time_param_day>
		display_line_bottom();
    2604:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    2608:	8e eb       	ldi	r24, 0xBE	; 190
    260a:	91 e0       	ldi	r25, 0x01	; 1
    260c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_day);
    2610:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <time_param_day>
    2614:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <time_param_day+0x1>
    2618:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    261c:	73 c0       	rjmp	.+230    	; 0x2704 <decrement_time_param+0x20c>
		case 3:
		if(time_param_hour == 0){
    261e:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <time_param_hour>
    2622:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <time_param_hour+0x1>
    2626:	89 2b       	or	r24, r25
    2628:	29 f4       	brne	.+10     	; 0x2634 <decrement_time_param+0x13c>
			write_str_display("Wrong input!");
    262a:	81 e2       	ldi	r24, 0x21	; 33
    262c:	92 e0       	ldi	r25, 0x02	; 2
    262e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    2632:	68 c0       	rjmp	.+208    	; 0x2704 <decrement_time_param+0x20c>
		}
		
		write_str_display("Hour decreased");
    2634:	8b eb       	ldi	r24, 0xBB	; 187
    2636:	92 e0       	ldi	r25, 0x02	; 2
    2638:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_hour--;
    263c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <time_param_hour>
    2640:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <time_param_hour+0x1>
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <time_param_hour+0x1>
    264a:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <time_param_hour>
		display_line_bottom();
    264e:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    2652:	8e eb       	ldi	r24, 0xBE	; 190
    2654:	91 e0       	ldi	r25, 0x01	; 1
    2656:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_hour);
    265a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <time_param_hour>
    265e:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <time_param_hour+0x1>
    2662:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    2666:	4e c0       	rjmp	.+156    	; 0x2704 <decrement_time_param+0x20c>
		case 4:
		if(time_param_minute == 0){
    2668:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <time_param_minute>
    266c:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <time_param_minute+0x1>
    2670:	89 2b       	or	r24, r25
    2672:	29 f4       	brne	.+10     	; 0x267e <decrement_time_param+0x186>
			write_str_display("Wrong input!");
    2674:	81 e2       	ldi	r24, 0x21	; 33
    2676:	92 e0       	ldi	r25, 0x02	; 2
    2678:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    267c:	43 c0       	rjmp	.+134    	; 0x2704 <decrement_time_param+0x20c>
		}
		
		write_str_display("Minute decreased");
    267e:	8a ec       	ldi	r24, 0xCA	; 202
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_minute--;
    2686:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <time_param_minute>
    268a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <time_param_minute+0x1>
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <time_param_minute+0x1>
    2694:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <time_param_minute>
		display_line_bottom();
    2698:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    269c:	8e eb       	ldi	r24, 0xBE	; 190
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_minute);
    26a4:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <time_param_minute>
    26a8:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <time_param_minute+0x1>
    26ac:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    26b0:	29 c0       	rjmp	.+82     	; 0x2704 <decrement_time_param+0x20c>
		case 5:
		if(time_param_second == 0){
    26b2:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <time_param_second>
    26b6:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <time_param_second+0x1>
    26ba:	89 2b       	or	r24, r25
    26bc:	29 f4       	brne	.+10     	; 0x26c8 <decrement_time_param+0x1d0>
			write_str_display("Wrong input!");
    26be:	81 e2       	ldi	r24, 0x21	; 33
    26c0:	92 e0       	ldi	r25, 0x02	; 2
    26c2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
			return;
    26c6:	1e c0       	rjmp	.+60     	; 0x2704 <decrement_time_param+0x20c>
		}
		
		write_str_display("Second decreased");
    26c8:	8b ed       	ldi	r24, 0xDB	; 219
    26ca:	92 e0       	ldi	r25, 0x02	; 2
    26cc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		time_param_second--;
    26d0:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <time_param_second>
    26d4:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <time_param_second+0x1>
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <time_param_second+0x1>
    26de:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <time_param_second>
		display_line_bottom();
    26e2:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
		write_str_display("Current: ");
    26e6:	8e eb       	ldi	r24, 0xBE	; 190
    26e8:	91 e0       	ldi	r25, 0x01	; 1
    26ea:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		write_int_display(time_param_second);
    26ee:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <time_param_second>
    26f2:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <time_param_second+0x1>
    26f6:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
		break;
    26fa:	04 c0       	rjmp	.+8      	; 0x2704 <decrement_time_param+0x20c>
		default:
		write_str_display("Wrong time param");
    26fc:	8d e7       	ldi	r24, 0x7D	; 125
    26fe:	92 e0       	ldi	r25, 0x02	; 2
    2700:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
	}
}
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	08 95       	ret

0000270a <display_time>:

void display_time(){
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
	if(!time_set){
    2712:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <time_set>
    2716:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <time_set+0x1>
    271a:	89 2b       	or	r24, r25
    271c:	29 f4       	brne	.+10     	; 0x2728 <display_time+0x1e>
		write_str_display("Time not set!");
    271e:	8c ee       	ldi	r24, 0xEC	; 236
    2720:	92 e0       	ldi	r25, 0x02	; 2
    2722:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
		return;
    2726:	6d c0       	rjmp	.+218    	; 0x2802 <display_time+0xf8>
	}
	
	get_time();
    2728:	e9 d0       	rcall	.+466    	; 0x28fc <get_time>
	
	clear_display();
    272a:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
	
	write_int_display(2000 + current_year);
    272e:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <current_year>
    2732:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <current_year+0x1>
    2736:	80 53       	subi	r24, 0x30	; 48
    2738:	98 4f       	sbci	r25, 0xF8	; 248
    273a:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	write_str_display("-");
    273e:	8a ef       	ldi	r24, 0xFA	; 250
    2740:	92 e0       	ldi	r25, 0x02	; 2
    2742:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
	
	if(current_month < 10) write_int_display(0);
    2746:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <current_month>
    274a:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <current_month+0x1>
    274e:	0a 97       	sbiw	r24, 0x0a	; 10
    2750:	24 f4       	brge	.+8      	; 0x275a <display_time+0x50>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	write_int_display(current_month);
    275a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <current_month>
    275e:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <current_month+0x1>
    2762:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	write_str_display("-");
    2766:	8a ef       	ldi	r24, 0xFA	; 250
    2768:	92 e0       	ldi	r25, 0x02	; 2
    276a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
	
	if(current_day < 10) write_int_display(0);
    276e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <current_day>
    2772:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <current_day+0x1>
    2776:	0a 97       	sbiw	r24, 0x0a	; 10
    2778:	24 f4       	brge	.+8      	; 0x2782 <display_time+0x78>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	write_int_display(current_day);
    2782:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <current_day>
    2786:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <current_day+0x1>
    278a:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	
	display_line_bottom();
    278e:	0e 94 1b 04 	call	0x836	; 0x836 <display_line_bottom>
	
	if(current_hour < 10) write_int_display(0);
    2792:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <current_hour>
    2796:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <current_hour+0x1>
    279a:	0a 97       	sbiw	r24, 0x0a	; 10
    279c:	24 f4       	brge	.+8      	; 0x27a6 <display_time+0x9c>
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	write_int_display(current_hour);
    27a6:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <current_hour>
    27aa:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <current_hour+0x1>
    27ae:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	write_str_display(":");
    27b2:	8c ef       	ldi	r24, 0xFC	; 252
    27b4:	92 e0       	ldi	r25, 0x02	; 2
    27b6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
	
	if(current_minute < 10) write_int_display(0);
    27ba:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <current_minute>
    27be:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <current_minute+0x1>
    27c2:	0a 97       	sbiw	r24, 0x0a	; 10
    27c4:	24 f4       	brge	.+8      	; 0x27ce <display_time+0xc4>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	write_int_display(current_minute);
    27ce:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <current_minute>
    27d2:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <current_minute+0x1>
    27d6:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	write_str_display(":");
    27da:	8c ef       	ldi	r24, 0xFC	; 252
    27dc:	92 e0       	ldi	r25, 0x02	; 2
    27de:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
	
	if(current_second < 10) write_int_display(0);
    27e2:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <current_second>
    27e6:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <current_second+0x1>
    27ea:	0a 97       	sbiw	r24, 0x0a	; 10
    27ec:	24 f4       	brge	.+8      	; 0x27f6 <display_time+0xec>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
	write_int_display(current_second);
    27f6:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <current_second>
    27fa:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <current_second+0x1>
    27fe:	0e 94 88 06 	call	0xd10	; 0xd10 <write_int_display>
}
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	08 95       	ret

00002808 <set_clock>:

void set_clock(){
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
	i2c_start(RTC_WRITE);
    2810:	8e ed       	ldi	r24, 0xDE	; 222
    2812:	0e 94 c2 06 	call	0xd84	; 0xd84 <i2c_start>
	i2c_write(0x00);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
	i2c_write(calculate_clock_input(time_param_second) | (1 << 7) );
    281c:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <time_param_second>
    2820:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <time_param_second+0x1>
    2824:	3b d0       	rcall	.+118    	; 0x289c <calculate_clock_input>
    2826:	80 68       	ori	r24, 0x80	; 128
    2828:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
	i2c_write(calculate_clock_input(time_param_minute));
    282c:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <time_param_minute>
    2830:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <time_param_minute+0x1>
    2834:	33 d0       	rcall	.+102    	; 0x289c <calculate_clock_input>
    2836:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
	i2c_write(calculate_clock_input(time_param_hour));
    283a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <time_param_hour>
    283e:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <time_param_hour+0x1>
    2842:	2c d0       	rcall	.+88     	; 0x289c <calculate_clock_input>
    2844:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
	i2c_write(0x04);
    2848:	84 e0       	ldi	r24, 0x04	; 4
    284a:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
	i2c_write(calculate_clock_input(time_param_day));
    284e:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <time_param_day>
    2852:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <time_param_day+0x1>
    2856:	22 d0       	rcall	.+68     	; 0x289c <calculate_clock_input>
    2858:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
	i2c_write(calculate_clock_input(time_param_month));
    285c:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_param_month>
    2860:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_param_month+0x1>
    2864:	1b d0       	rcall	.+54     	; 0x289c <calculate_clock_input>
    2866:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
	i2c_write(calculate_clock_input(time_param_year));
    286a:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_param_year>
    286e:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <time_param_year+0x1>
    2872:	14 d0       	rcall	.+40     	; 0x289c <calculate_clock_input>
    2874:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
    2878:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_stop>
	i2c_stop();
    287c:	0e 94 89 03 	call	0x712	; 0x712 <clear_display>
	
	clear_display();
    2880:	8e ef       	ldi	r24, 0xFE	; 254
	write_str_display("Time set!");
    2882:	92 e0       	ldi	r25, 0x02	; 2
    2884:	0e 94 5f 06 	call	0xcbe	; 0xcbe <write_str_display>
    2888:	81 e0       	ldi	r24, 0x01	; 1
	time_set = 1;
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <time_set+0x1>
    2890:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <time_set>
    2894:	00 00       	nop
}
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	08 95       	ret

0000289c <calculate_clock_input>:
    289c:	cf 93       	push	r28

int calculate_clock_input(int input){
    289e:	df 93       	push	r29
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <calculate_clock_input+0x6>
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <calculate_clock_input+0x8>
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <calculate_clock_input+0xa>
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
	int input_tens = input / 10;
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	2a e0       	ldi	r18, 0x0A	; 10
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	b9 01       	movw	r22, r18
    28b8:	5a d3       	rcall	.+1716   	; 0x2f6e <__divmodhi4>
    28ba:	cb 01       	movw	r24, r22
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
	int input_ones = input % 10;
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	9e 81       	ldd	r25, Y+6	; 0x06
    28c4:	2a e0       	ldi	r18, 0x0A	; 10
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	b9 01       	movw	r22, r18
    28ca:	51 d3       	rcall	.+1698   	; 0x2f6e <__divmodhi4>
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
	
	return (input_tens << 4) | input_ones;
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	9c 01       	movw	r18, r24
    28d6:	22 95       	swap	r18
    28d8:	32 95       	swap	r19
    28da:	30 7f       	andi	r19, 0xF0	; 240
    28dc:	32 27       	eor	r19, r18
    28de:	20 7f       	andi	r18, 0xF0	; 240
    28e0:	32 27       	eor	r19, r18
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	82 2b       	or	r24, r18
    28e8:	93 2b       	or	r25, r19
}
    28ea:	26 96       	adiw	r28, 0x06	; 6
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	08 95       	ret

000028fc <get_time>:

void get_time(){
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
	i2c_start(RTC_WRITE);
    2904:	8e ed       	ldi	r24, 0xDE	; 222
    2906:	0e 94 c2 06 	call	0xd84	; 0xd84 <i2c_start>
	i2c_write(0x00);
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
	i2c_start(RTC_READ);
    2910:	8f ed       	ldi	r24, 0xDF	; 223
    2912:	0e 94 c2 06 	call	0xd84	; 0xd84 <i2c_start>
	read_second = i2c_read_ack();
    2916:	0e 94 31 07 	call	0xe62	; 0xe62 <i2c_read_ack>
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <read_second+0x1>
    2922:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <read_second>
	current_second = ((read_second & 0b01110000) >> 4) * 10 + (read_second & 0b00001111);
    2926:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <read_second>
    292a:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <read_second+0x1>
    292e:	80 77       	andi	r24, 0x70	; 112
    2930:	99 27       	eor	r25, r25
    2932:	95 95       	asr	r25
    2934:	87 95       	ror	r24
    2936:	95 95       	asr	r25
    2938:	87 95       	ror	r24
    293a:	95 95       	asr	r25
    293c:	87 95       	ror	r24
    293e:	95 95       	asr	r25
    2940:	87 95       	ror	r24
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	9c 01       	movw	r18, r24
    2948:	22 0f       	add	r18, r18
    294a:	33 1f       	adc	r19, r19
    294c:	22 0f       	add	r18, r18
    294e:	33 1f       	adc	r19, r19
    2950:	28 0f       	add	r18, r24
    2952:	39 1f       	adc	r19, r25
    2954:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <read_second>
    2958:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <read_second+0x1>
    295c:	8f 70       	andi	r24, 0x0F	; 15
    295e:	99 27       	eor	r25, r25
    2960:	82 0f       	add	r24, r18
    2962:	93 1f       	adc	r25, r19
    2964:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <current_second+0x1>
    2968:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <current_second>
	read_minute = i2c_read_ack();
    296c:	0e 94 31 07 	call	0xe62	; 0xe62 <i2c_read_ack>
    2970:	88 2f       	mov	r24, r24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <read_minute+0x1>
    2978:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <read_minute>
	current_minute = ((read_minute & 0b01110000) >> 4) * 10 + (read_minute & 0b00001111);
    297c:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <read_minute>
    2980:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <read_minute+0x1>
    2984:	80 77       	andi	r24, 0x70	; 112
    2986:	99 27       	eor	r25, r25
    2988:	95 95       	asr	r25
    298a:	87 95       	ror	r24
    298c:	95 95       	asr	r25
    298e:	87 95       	ror	r24
    2990:	95 95       	asr	r25
    2992:	87 95       	ror	r24
    2994:	95 95       	asr	r25
    2996:	87 95       	ror	r24
    2998:	88 0f       	add	r24, r24
    299a:	99 1f       	adc	r25, r25
    299c:	9c 01       	movw	r18, r24
    299e:	22 0f       	add	r18, r18
    29a0:	33 1f       	adc	r19, r19
    29a2:	22 0f       	add	r18, r18
    29a4:	33 1f       	adc	r19, r19
    29a6:	28 0f       	add	r18, r24
    29a8:	39 1f       	adc	r19, r25
    29aa:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <read_minute>
    29ae:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <read_minute+0x1>
    29b2:	8f 70       	andi	r24, 0x0F	; 15
    29b4:	99 27       	eor	r25, r25
    29b6:	82 0f       	add	r24, r18
    29b8:	93 1f       	adc	r25, r19
    29ba:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <current_minute+0x1>
    29be:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <current_minute>
	read_hour = i2c_read_ack();
    29c2:	0e 94 31 07 	call	0xe62	; 0xe62 <i2c_read_ack>
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <read_hour+0x1>
    29ce:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <read_hour>
	current_hour = ((read_hour & 0b00010000) >> 4) * 10 + (read_hour & 0b00001111);
    29d2:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <read_hour>
    29d6:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <read_hour+0x1>
    29da:	80 71       	andi	r24, 0x10	; 16
    29dc:	99 27       	eor	r25, r25
    29de:	95 95       	asr	r25
    29e0:	87 95       	ror	r24
    29e2:	95 95       	asr	r25
    29e4:	87 95       	ror	r24
    29e6:	95 95       	asr	r25
    29e8:	87 95       	ror	r24
    29ea:	95 95       	asr	r25
    29ec:	87 95       	ror	r24
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	9c 01       	movw	r18, r24
    29f4:	22 0f       	add	r18, r18
    29f6:	33 1f       	adc	r19, r19
    29f8:	22 0f       	add	r18, r18
    29fa:	33 1f       	adc	r19, r19
    29fc:	28 0f       	add	r18, r24
    29fe:	39 1f       	adc	r19, r25
    2a00:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <read_hour>
    2a04:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <read_hour+0x1>
    2a08:	8f 70       	andi	r24, 0x0F	; 15
    2a0a:	99 27       	eor	r25, r25
    2a0c:	82 0f       	add	r24, r18
    2a0e:	93 1f       	adc	r25, r19
    2a10:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <current_hour+0x1>
    2a14:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <current_hour>
	
	i2c_start(RTC_WRITE);
    2a18:	8e ed       	ldi	r24, 0xDE	; 222
    2a1a:	0e 94 c2 06 	call	0xd84	; 0xd84 <i2c_start>
	i2c_write(0x04);
    2a1e:	84 e0       	ldi	r24, 0x04	; 4
    2a20:	0e 94 09 07 	call	0xe12	; 0xe12 <i2c_write>
	i2c_start(RTC_READ);
    2a24:	8f ed       	ldi	r24, 0xDF	; 223
    2a26:	0e 94 c2 06 	call	0xd84	; 0xd84 <i2c_start>
	read_day = i2c_read_ack();
    2a2a:	0e 94 31 07 	call	0xe62	; 0xe62 <i2c_read_ack>
    2a2e:	88 2f       	mov	r24, r24
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <read_day+0x1>
    2a36:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <read_day>
	current_day = ((read_day & 0b00110000) >> 4) * 10 + (read_day & 0b00001111);
    2a3a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <read_day>
    2a3e:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <read_day+0x1>
    2a42:	80 73       	andi	r24, 0x30	; 48
    2a44:	99 27       	eor	r25, r25
    2a46:	95 95       	asr	r25
    2a48:	87 95       	ror	r24
    2a4a:	95 95       	asr	r25
    2a4c:	87 95       	ror	r24
    2a4e:	95 95       	asr	r25
    2a50:	87 95       	ror	r24
    2a52:	95 95       	asr	r25
    2a54:	87 95       	ror	r24
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	9c 01       	movw	r18, r24
    2a5c:	22 0f       	add	r18, r18
    2a5e:	33 1f       	adc	r19, r19
    2a60:	22 0f       	add	r18, r18
    2a62:	33 1f       	adc	r19, r19
    2a64:	28 0f       	add	r18, r24
    2a66:	39 1f       	adc	r19, r25
    2a68:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <read_day>
    2a6c:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <read_day+0x1>
    2a70:	8f 70       	andi	r24, 0x0F	; 15
    2a72:	99 27       	eor	r25, r25
    2a74:	82 0f       	add	r24, r18
    2a76:	93 1f       	adc	r25, r19
    2a78:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <current_day+0x1>
    2a7c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <current_day>
	read_month = i2c_read_ack();
    2a80:	0e 94 31 07 	call	0xe62	; 0xe62 <i2c_read_ack>
    2a84:	88 2f       	mov	r24, r24
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <read_month+0x1>
    2a8c:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <read_month>
	current_month = ((read_month & 0b00010000) >> 4) * 10 + (read_month & 0b00001111);
    2a90:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <read_month>
    2a94:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <read_month+0x1>
    2a98:	80 71       	andi	r24, 0x10	; 16
    2a9a:	99 27       	eor	r25, r25
    2a9c:	95 95       	asr	r25
    2a9e:	87 95       	ror	r24
    2aa0:	95 95       	asr	r25
    2aa2:	87 95       	ror	r24
    2aa4:	95 95       	asr	r25
    2aa6:	87 95       	ror	r24
    2aa8:	95 95       	asr	r25
    2aaa:	87 95       	ror	r24
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	9c 01       	movw	r18, r24
    2ab2:	22 0f       	add	r18, r18
    2ab4:	33 1f       	adc	r19, r19
    2ab6:	22 0f       	add	r18, r18
    2ab8:	33 1f       	adc	r19, r19
    2aba:	28 0f       	add	r18, r24
    2abc:	39 1f       	adc	r19, r25
    2abe:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <read_month>
    2ac2:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <read_month+0x1>
    2ac6:	8f 70       	andi	r24, 0x0F	; 15
    2ac8:	99 27       	eor	r25, r25
    2aca:	82 0f       	add	r24, r18
    2acc:	93 1f       	adc	r25, r19
    2ace:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <current_month+0x1>
    2ad2:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <current_month>
	read_year = i2c_read_nack();
    2ad6:	0e 94 48 07 	call	0xe90	; 0xe90 <i2c_read_nack>
    2ada:	88 2f       	mov	r24, r24
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <read_year+0x1>
    2ae2:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <read_year>
	current_year = ((read_year & 0b11110000) >> 4) * 10 + (read_year & 0b00001111);
    2ae6:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <read_year>
    2aea:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <read_year+0x1>
    2aee:	80 7f       	andi	r24, 0xF0	; 240
    2af0:	99 27       	eor	r25, r25
    2af2:	95 95       	asr	r25
    2af4:	87 95       	ror	r24
    2af6:	95 95       	asr	r25
    2af8:	87 95       	ror	r24
    2afa:	95 95       	asr	r25
    2afc:	87 95       	ror	r24
    2afe:	95 95       	asr	r25
    2b00:	87 95       	ror	r24
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	9c 01       	movw	r18, r24
    2b08:	22 0f       	add	r18, r18
    2b0a:	33 1f       	adc	r19, r19
    2b0c:	22 0f       	add	r18, r18
    2b0e:	33 1f       	adc	r19, r19
    2b10:	28 0f       	add	r18, r24
    2b12:	39 1f       	adc	r19, r25
    2b14:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <read_year>
    2b18:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <read_year+0x1>
    2b1c:	8f 70       	andi	r24, 0x0F	; 15
    2b1e:	99 27       	eor	r25, r25
    2b20:	82 0f       	add	r24, r18
    2b22:	93 1f       	adc	r25, r19
    2b24:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <current_year+0x1>
    2b28:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <current_year>
	
	i2c_stop();
    2b2c:	0e 94 5f 07 	call	0xebe	; 0xebe <i2c_stop>
}
    2b30:	00 00       	nop
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	08 95       	ret

00002b38 <__subsf3>:
    2b38:	50 58       	subi	r21, 0x80	; 128

00002b3a <__addsf3>:
    2b3a:	bb 27       	eor	r27, r27
    2b3c:	aa 27       	eor	r26, r26
    2b3e:	0e d0       	rcall	.+28     	; 0x2b5c <__addsf3x>
    2b40:	75 c1       	rjmp	.+746    	; 0x2e2c <__fp_round>
    2b42:	66 d1       	rcall	.+716    	; 0x2e10 <__fp_pscA>
    2b44:	30 f0       	brcs	.+12     	; 0x2b52 <__addsf3+0x18>
    2b46:	6b d1       	rcall	.+726    	; 0x2e1e <__fp_pscB>
    2b48:	20 f0       	brcs	.+8      	; 0x2b52 <__addsf3+0x18>
    2b4a:	31 f4       	brne	.+12     	; 0x2b58 <__addsf3+0x1e>
    2b4c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b4e:	11 f4       	brne	.+4      	; 0x2b54 <__addsf3+0x1a>
    2b50:	1e f4       	brtc	.+6      	; 0x2b58 <__addsf3+0x1e>
    2b52:	5b c1       	rjmp	.+694    	; 0x2e0a <__fp_nan>
    2b54:	0e f4       	brtc	.+2      	; 0x2b58 <__addsf3+0x1e>
    2b56:	e0 95       	com	r30
    2b58:	e7 fb       	bst	r30, 7
    2b5a:	51 c1       	rjmp	.+674    	; 0x2dfe <__fp_inf>

00002b5c <__addsf3x>:
    2b5c:	e9 2f       	mov	r30, r25
    2b5e:	77 d1       	rcall	.+750    	; 0x2e4e <__fp_split3>
    2b60:	80 f3       	brcs	.-32     	; 0x2b42 <__addsf3+0x8>
    2b62:	ba 17       	cp	r27, r26
    2b64:	62 07       	cpc	r22, r18
    2b66:	73 07       	cpc	r23, r19
    2b68:	84 07       	cpc	r24, r20
    2b6a:	95 07       	cpc	r25, r21
    2b6c:	18 f0       	brcs	.+6      	; 0x2b74 <__addsf3x+0x18>
    2b6e:	71 f4       	brne	.+28     	; 0x2b8c <__addsf3x+0x30>
    2b70:	9e f5       	brtc	.+102    	; 0x2bd8 <__addsf3x+0x7c>
    2b72:	8f c1       	rjmp	.+798    	; 0x2e92 <__fp_zero>
    2b74:	0e f4       	brtc	.+2      	; 0x2b78 <__addsf3x+0x1c>
    2b76:	e0 95       	com	r30
    2b78:	0b 2e       	mov	r0, r27
    2b7a:	ba 2f       	mov	r27, r26
    2b7c:	a0 2d       	mov	r26, r0
    2b7e:	0b 01       	movw	r0, r22
    2b80:	b9 01       	movw	r22, r18
    2b82:	90 01       	movw	r18, r0
    2b84:	0c 01       	movw	r0, r24
    2b86:	ca 01       	movw	r24, r20
    2b88:	a0 01       	movw	r20, r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	ff 27       	eor	r31, r31
    2b8e:	59 1b       	sub	r21, r25
    2b90:	99 f0       	breq	.+38     	; 0x2bb8 <__addsf3x+0x5c>
    2b92:	59 3f       	cpi	r21, 0xF9	; 249
    2b94:	50 f4       	brcc	.+20     	; 0x2baa <__addsf3x+0x4e>
    2b96:	50 3e       	cpi	r21, 0xE0	; 224
    2b98:	68 f1       	brcs	.+90     	; 0x2bf4 <__addsf3x+0x98>
    2b9a:	1a 16       	cp	r1, r26
    2b9c:	f0 40       	sbci	r31, 0x00	; 0
    2b9e:	a2 2f       	mov	r26, r18
    2ba0:	23 2f       	mov	r18, r19
    2ba2:	34 2f       	mov	r19, r20
    2ba4:	44 27       	eor	r20, r20
    2ba6:	58 5f       	subi	r21, 0xF8	; 248
    2ba8:	f3 cf       	rjmp	.-26     	; 0x2b90 <__addsf3x+0x34>
    2baa:	46 95       	lsr	r20
    2bac:	37 95       	ror	r19
    2bae:	27 95       	ror	r18
    2bb0:	a7 95       	ror	r26
    2bb2:	f0 40       	sbci	r31, 0x00	; 0
    2bb4:	53 95       	inc	r21
    2bb6:	c9 f7       	brne	.-14     	; 0x2baa <__addsf3x+0x4e>
    2bb8:	7e f4       	brtc	.+30     	; 0x2bd8 <__addsf3x+0x7c>
    2bba:	1f 16       	cp	r1, r31
    2bbc:	ba 0b       	sbc	r27, r26
    2bbe:	62 0b       	sbc	r22, r18
    2bc0:	73 0b       	sbc	r23, r19
    2bc2:	84 0b       	sbc	r24, r20
    2bc4:	ba f0       	brmi	.+46     	; 0x2bf4 <__addsf3x+0x98>
    2bc6:	91 50       	subi	r25, 0x01	; 1
    2bc8:	a1 f0       	breq	.+40     	; 0x2bf2 <__addsf3x+0x96>
    2bca:	ff 0f       	add	r31, r31
    2bcc:	bb 1f       	adc	r27, r27
    2bce:	66 1f       	adc	r22, r22
    2bd0:	77 1f       	adc	r23, r23
    2bd2:	88 1f       	adc	r24, r24
    2bd4:	c2 f7       	brpl	.-16     	; 0x2bc6 <__addsf3x+0x6a>
    2bd6:	0e c0       	rjmp	.+28     	; 0x2bf4 <__addsf3x+0x98>
    2bd8:	ba 0f       	add	r27, r26
    2bda:	62 1f       	adc	r22, r18
    2bdc:	73 1f       	adc	r23, r19
    2bde:	84 1f       	adc	r24, r20
    2be0:	48 f4       	brcc	.+18     	; 0x2bf4 <__addsf3x+0x98>
    2be2:	87 95       	ror	r24
    2be4:	77 95       	ror	r23
    2be6:	67 95       	ror	r22
    2be8:	b7 95       	ror	r27
    2bea:	f7 95       	ror	r31
    2bec:	9e 3f       	cpi	r25, 0xFE	; 254
    2bee:	08 f0       	brcs	.+2      	; 0x2bf2 <__addsf3x+0x96>
    2bf0:	b3 cf       	rjmp	.-154    	; 0x2b58 <__addsf3+0x1e>
    2bf2:	93 95       	inc	r25
    2bf4:	88 0f       	add	r24, r24
    2bf6:	08 f0       	brcs	.+2      	; 0x2bfa <__addsf3x+0x9e>
    2bf8:	99 27       	eor	r25, r25
    2bfa:	ee 0f       	add	r30, r30
    2bfc:	97 95       	ror	r25
    2bfe:	87 95       	ror	r24
    2c00:	08 95       	ret

00002c02 <__cmpsf2>:
    2c02:	d9 d0       	rcall	.+434    	; 0x2db6 <__fp_cmp>
    2c04:	08 f4       	brcc	.+2      	; 0x2c08 <__cmpsf2+0x6>
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	08 95       	ret

00002c0a <__divsf3>:
    2c0a:	0c d0       	rcall	.+24     	; 0x2c24 <__divsf3x>
    2c0c:	0f c1       	rjmp	.+542    	; 0x2e2c <__fp_round>
    2c0e:	07 d1       	rcall	.+526    	; 0x2e1e <__fp_pscB>
    2c10:	40 f0       	brcs	.+16     	; 0x2c22 <__divsf3+0x18>
    2c12:	fe d0       	rcall	.+508    	; 0x2e10 <__fp_pscA>
    2c14:	30 f0       	brcs	.+12     	; 0x2c22 <__divsf3+0x18>
    2c16:	21 f4       	brne	.+8      	; 0x2c20 <__divsf3+0x16>
    2c18:	5f 3f       	cpi	r21, 0xFF	; 255
    2c1a:	19 f0       	breq	.+6      	; 0x2c22 <__divsf3+0x18>
    2c1c:	f0 c0       	rjmp	.+480    	; 0x2dfe <__fp_inf>
    2c1e:	51 11       	cpse	r21, r1
    2c20:	39 c1       	rjmp	.+626    	; 0x2e94 <__fp_szero>
    2c22:	f3 c0       	rjmp	.+486    	; 0x2e0a <__fp_nan>

00002c24 <__divsf3x>:
    2c24:	14 d1       	rcall	.+552    	; 0x2e4e <__fp_split3>
    2c26:	98 f3       	brcs	.-26     	; 0x2c0e <__divsf3+0x4>

00002c28 <__divsf3_pse>:
    2c28:	99 23       	and	r25, r25
    2c2a:	c9 f3       	breq	.-14     	; 0x2c1e <__divsf3+0x14>
    2c2c:	55 23       	and	r21, r21
    2c2e:	b1 f3       	breq	.-20     	; 0x2c1c <__divsf3+0x12>
    2c30:	95 1b       	sub	r25, r21
    2c32:	55 0b       	sbc	r21, r21
    2c34:	bb 27       	eor	r27, r27
    2c36:	aa 27       	eor	r26, r26
    2c38:	62 17       	cp	r22, r18
    2c3a:	73 07       	cpc	r23, r19
    2c3c:	84 07       	cpc	r24, r20
    2c3e:	38 f0       	brcs	.+14     	; 0x2c4e <__divsf3_pse+0x26>
    2c40:	9f 5f       	subi	r25, 0xFF	; 255
    2c42:	5f 4f       	sbci	r21, 0xFF	; 255
    2c44:	22 0f       	add	r18, r18
    2c46:	33 1f       	adc	r19, r19
    2c48:	44 1f       	adc	r20, r20
    2c4a:	aa 1f       	adc	r26, r26
    2c4c:	a9 f3       	breq	.-22     	; 0x2c38 <__divsf3_pse+0x10>
    2c4e:	33 d0       	rcall	.+102    	; 0x2cb6 <__divsf3_pse+0x8e>
    2c50:	0e 2e       	mov	r0, r30
    2c52:	3a f0       	brmi	.+14     	; 0x2c62 <__divsf3_pse+0x3a>
    2c54:	e0 e8       	ldi	r30, 0x80	; 128
    2c56:	30 d0       	rcall	.+96     	; 0x2cb8 <__divsf3_pse+0x90>
    2c58:	91 50       	subi	r25, 0x01	; 1
    2c5a:	50 40       	sbci	r21, 0x00	; 0
    2c5c:	e6 95       	lsr	r30
    2c5e:	00 1c       	adc	r0, r0
    2c60:	ca f7       	brpl	.-14     	; 0x2c54 <__divsf3_pse+0x2c>
    2c62:	29 d0       	rcall	.+82     	; 0x2cb6 <__divsf3_pse+0x8e>
    2c64:	fe 2f       	mov	r31, r30
    2c66:	27 d0       	rcall	.+78     	; 0x2cb6 <__divsf3_pse+0x8e>
    2c68:	66 0f       	add	r22, r22
    2c6a:	77 1f       	adc	r23, r23
    2c6c:	88 1f       	adc	r24, r24
    2c6e:	bb 1f       	adc	r27, r27
    2c70:	26 17       	cp	r18, r22
    2c72:	37 07       	cpc	r19, r23
    2c74:	48 07       	cpc	r20, r24
    2c76:	ab 07       	cpc	r26, r27
    2c78:	b0 e8       	ldi	r27, 0x80	; 128
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <__divsf3_pse+0x56>
    2c7c:	bb 0b       	sbc	r27, r27
    2c7e:	80 2d       	mov	r24, r0
    2c80:	bf 01       	movw	r22, r30
    2c82:	ff 27       	eor	r31, r31
    2c84:	93 58       	subi	r25, 0x83	; 131
    2c86:	5f 4f       	sbci	r21, 0xFF	; 255
    2c88:	2a f0       	brmi	.+10     	; 0x2c94 <__divsf3_pse+0x6c>
    2c8a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c8c:	51 05       	cpc	r21, r1
    2c8e:	68 f0       	brcs	.+26     	; 0x2caa <__divsf3_pse+0x82>
    2c90:	b6 c0       	rjmp	.+364    	; 0x2dfe <__fp_inf>
    2c92:	00 c1       	rjmp	.+512    	; 0x2e94 <__fp_szero>
    2c94:	5f 3f       	cpi	r21, 0xFF	; 255
    2c96:	ec f3       	brlt	.-6      	; 0x2c92 <__divsf3_pse+0x6a>
    2c98:	98 3e       	cpi	r25, 0xE8	; 232
    2c9a:	dc f3       	brlt	.-10     	; 0x2c92 <__divsf3_pse+0x6a>
    2c9c:	86 95       	lsr	r24
    2c9e:	77 95       	ror	r23
    2ca0:	67 95       	ror	r22
    2ca2:	b7 95       	ror	r27
    2ca4:	f7 95       	ror	r31
    2ca6:	9f 5f       	subi	r25, 0xFF	; 255
    2ca8:	c9 f7       	brne	.-14     	; 0x2c9c <__divsf3_pse+0x74>
    2caa:	88 0f       	add	r24, r24
    2cac:	91 1d       	adc	r25, r1
    2cae:	96 95       	lsr	r25
    2cb0:	87 95       	ror	r24
    2cb2:	97 f9       	bld	r25, 7
    2cb4:	08 95       	ret
    2cb6:	e1 e0       	ldi	r30, 0x01	; 1
    2cb8:	66 0f       	add	r22, r22
    2cba:	77 1f       	adc	r23, r23
    2cbc:	88 1f       	adc	r24, r24
    2cbe:	bb 1f       	adc	r27, r27
    2cc0:	62 17       	cp	r22, r18
    2cc2:	73 07       	cpc	r23, r19
    2cc4:	84 07       	cpc	r24, r20
    2cc6:	ba 07       	cpc	r27, r26
    2cc8:	20 f0       	brcs	.+8      	; 0x2cd2 <__divsf3_pse+0xaa>
    2cca:	62 1b       	sub	r22, r18
    2ccc:	73 0b       	sbc	r23, r19
    2cce:	84 0b       	sbc	r24, r20
    2cd0:	ba 0b       	sbc	r27, r26
    2cd2:	ee 1f       	adc	r30, r30
    2cd4:	88 f7       	brcc	.-30     	; 0x2cb8 <__divsf3_pse+0x90>
    2cd6:	e0 95       	com	r30
    2cd8:	08 95       	ret

00002cda <__fixsfsi>:
    2cda:	04 d0       	rcall	.+8      	; 0x2ce4 <__fixunssfsi>
    2cdc:	68 94       	set
    2cde:	b1 11       	cpse	r27, r1
    2ce0:	d9 c0       	rjmp	.+434    	; 0x2e94 <__fp_szero>
    2ce2:	08 95       	ret

00002ce4 <__fixunssfsi>:
    2ce4:	bc d0       	rcall	.+376    	; 0x2e5e <__fp_splitA>
    2ce6:	88 f0       	brcs	.+34     	; 0x2d0a <__fixunssfsi+0x26>
    2ce8:	9f 57       	subi	r25, 0x7F	; 127
    2cea:	90 f0       	brcs	.+36     	; 0x2d10 <__fixunssfsi+0x2c>
    2cec:	b9 2f       	mov	r27, r25
    2cee:	99 27       	eor	r25, r25
    2cf0:	b7 51       	subi	r27, 0x17	; 23
    2cf2:	a0 f0       	brcs	.+40     	; 0x2d1c <__fixunssfsi+0x38>
    2cf4:	d1 f0       	breq	.+52     	; 0x2d2a <__fixunssfsi+0x46>
    2cf6:	66 0f       	add	r22, r22
    2cf8:	77 1f       	adc	r23, r23
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	1a f0       	brmi	.+6      	; 0x2d06 <__fixunssfsi+0x22>
    2d00:	ba 95       	dec	r27
    2d02:	c9 f7       	brne	.-14     	; 0x2cf6 <__fixunssfsi+0x12>
    2d04:	12 c0       	rjmp	.+36     	; 0x2d2a <__fixunssfsi+0x46>
    2d06:	b1 30       	cpi	r27, 0x01	; 1
    2d08:	81 f0       	breq	.+32     	; 0x2d2a <__fixunssfsi+0x46>
    2d0a:	c3 d0       	rcall	.+390    	; 0x2e92 <__fp_zero>
    2d0c:	b1 e0       	ldi	r27, 0x01	; 1
    2d0e:	08 95       	ret
    2d10:	c0 c0       	rjmp	.+384    	; 0x2e92 <__fp_zero>
    2d12:	67 2f       	mov	r22, r23
    2d14:	78 2f       	mov	r23, r24
    2d16:	88 27       	eor	r24, r24
    2d18:	b8 5f       	subi	r27, 0xF8	; 248
    2d1a:	39 f0       	breq	.+14     	; 0x2d2a <__fixunssfsi+0x46>
    2d1c:	b9 3f       	cpi	r27, 0xF9	; 249
    2d1e:	cc f3       	brlt	.-14     	; 0x2d12 <__fixunssfsi+0x2e>
    2d20:	86 95       	lsr	r24
    2d22:	77 95       	ror	r23
    2d24:	67 95       	ror	r22
    2d26:	b3 95       	inc	r27
    2d28:	d9 f7       	brne	.-10     	; 0x2d20 <__fixunssfsi+0x3c>
    2d2a:	3e f4       	brtc	.+14     	; 0x2d3a <__fixunssfsi+0x56>
    2d2c:	90 95       	com	r25
    2d2e:	80 95       	com	r24
    2d30:	70 95       	com	r23
    2d32:	61 95       	neg	r22
    2d34:	7f 4f       	sbci	r23, 0xFF	; 255
    2d36:	8f 4f       	sbci	r24, 0xFF	; 255
    2d38:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3a:	08 95       	ret

00002d3c <__floatunsisf>:
    2d3c:	e8 94       	clt
    2d3e:	09 c0       	rjmp	.+18     	; 0x2d52 <__floatsisf+0x12>

00002d40 <__floatsisf>:
    2d40:	97 fb       	bst	r25, 7
    2d42:	3e f4       	brtc	.+14     	; 0x2d52 <__floatsisf+0x12>
    2d44:	90 95       	com	r25
    2d46:	80 95       	com	r24
    2d48:	70 95       	com	r23
    2d4a:	61 95       	neg	r22
    2d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d50:	9f 4f       	sbci	r25, 0xFF	; 255
    2d52:	99 23       	and	r25, r25
    2d54:	a9 f0       	breq	.+42     	; 0x2d80 <__floatsisf+0x40>
    2d56:	f9 2f       	mov	r31, r25
    2d58:	96 e9       	ldi	r25, 0x96	; 150
    2d5a:	bb 27       	eor	r27, r27
    2d5c:	93 95       	inc	r25
    2d5e:	f6 95       	lsr	r31
    2d60:	87 95       	ror	r24
    2d62:	77 95       	ror	r23
    2d64:	67 95       	ror	r22
    2d66:	b7 95       	ror	r27
    2d68:	f1 11       	cpse	r31, r1
    2d6a:	f8 cf       	rjmp	.-16     	; 0x2d5c <__floatsisf+0x1c>
    2d6c:	fa f4       	brpl	.+62     	; 0x2dac <__floatsisf+0x6c>
    2d6e:	bb 0f       	add	r27, r27
    2d70:	11 f4       	brne	.+4      	; 0x2d76 <__floatsisf+0x36>
    2d72:	60 ff       	sbrs	r22, 0
    2d74:	1b c0       	rjmp	.+54     	; 0x2dac <__floatsisf+0x6c>
    2d76:	6f 5f       	subi	r22, 0xFF	; 255
    2d78:	7f 4f       	sbci	r23, 0xFF	; 255
    2d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7e:	16 c0       	rjmp	.+44     	; 0x2dac <__floatsisf+0x6c>
    2d80:	88 23       	and	r24, r24
    2d82:	11 f0       	breq	.+4      	; 0x2d88 <__floatsisf+0x48>
    2d84:	96 e9       	ldi	r25, 0x96	; 150
    2d86:	11 c0       	rjmp	.+34     	; 0x2daa <__floatsisf+0x6a>
    2d88:	77 23       	and	r23, r23
    2d8a:	21 f0       	breq	.+8      	; 0x2d94 <__floatsisf+0x54>
    2d8c:	9e e8       	ldi	r25, 0x8E	; 142
    2d8e:	87 2f       	mov	r24, r23
    2d90:	76 2f       	mov	r23, r22
    2d92:	05 c0       	rjmp	.+10     	; 0x2d9e <__floatsisf+0x5e>
    2d94:	66 23       	and	r22, r22
    2d96:	71 f0       	breq	.+28     	; 0x2db4 <__floatsisf+0x74>
    2d98:	96 e8       	ldi	r25, 0x86	; 134
    2d9a:	86 2f       	mov	r24, r22
    2d9c:	70 e0       	ldi	r23, 0x00	; 0
    2d9e:	60 e0       	ldi	r22, 0x00	; 0
    2da0:	2a f0       	brmi	.+10     	; 0x2dac <__floatsisf+0x6c>
    2da2:	9a 95       	dec	r25
    2da4:	66 0f       	add	r22, r22
    2da6:	77 1f       	adc	r23, r23
    2da8:	88 1f       	adc	r24, r24
    2daa:	da f7       	brpl	.-10     	; 0x2da2 <__floatsisf+0x62>
    2dac:	88 0f       	add	r24, r24
    2dae:	96 95       	lsr	r25
    2db0:	87 95       	ror	r24
    2db2:	97 f9       	bld	r25, 7
    2db4:	08 95       	ret

00002db6 <__fp_cmp>:
    2db6:	99 0f       	add	r25, r25
    2db8:	00 08       	sbc	r0, r0
    2dba:	55 0f       	add	r21, r21
    2dbc:	aa 0b       	sbc	r26, r26
    2dbe:	e0 e8       	ldi	r30, 0x80	; 128
    2dc0:	fe ef       	ldi	r31, 0xFE	; 254
    2dc2:	16 16       	cp	r1, r22
    2dc4:	17 06       	cpc	r1, r23
    2dc6:	e8 07       	cpc	r30, r24
    2dc8:	f9 07       	cpc	r31, r25
    2dca:	c0 f0       	brcs	.+48     	; 0x2dfc <__fp_cmp+0x46>
    2dcc:	12 16       	cp	r1, r18
    2dce:	13 06       	cpc	r1, r19
    2dd0:	e4 07       	cpc	r30, r20
    2dd2:	f5 07       	cpc	r31, r21
    2dd4:	98 f0       	brcs	.+38     	; 0x2dfc <__fp_cmp+0x46>
    2dd6:	62 1b       	sub	r22, r18
    2dd8:	73 0b       	sbc	r23, r19
    2dda:	84 0b       	sbc	r24, r20
    2ddc:	95 0b       	sbc	r25, r21
    2dde:	39 f4       	brne	.+14     	; 0x2dee <__fp_cmp+0x38>
    2de0:	0a 26       	eor	r0, r26
    2de2:	61 f0       	breq	.+24     	; 0x2dfc <__fp_cmp+0x46>
    2de4:	23 2b       	or	r18, r19
    2de6:	24 2b       	or	r18, r20
    2de8:	25 2b       	or	r18, r21
    2dea:	21 f4       	brne	.+8      	; 0x2df4 <__fp_cmp+0x3e>
    2dec:	08 95       	ret
    2dee:	0a 26       	eor	r0, r26
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <__fp_cmp+0x3e>
    2df2:	a1 40       	sbci	r26, 0x01	; 1
    2df4:	a6 95       	lsr	r26
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	81 1d       	adc	r24, r1
    2dfa:	81 1d       	adc	r24, r1
    2dfc:	08 95       	ret

00002dfe <__fp_inf>:
    2dfe:	97 f9       	bld	r25, 7
    2e00:	9f 67       	ori	r25, 0x7F	; 127
    2e02:	80 e8       	ldi	r24, 0x80	; 128
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	60 e0       	ldi	r22, 0x00	; 0
    2e08:	08 95       	ret

00002e0a <__fp_nan>:
    2e0a:	9f ef       	ldi	r25, 0xFF	; 255
    2e0c:	80 ec       	ldi	r24, 0xC0	; 192
    2e0e:	08 95       	ret

00002e10 <__fp_pscA>:
    2e10:	00 24       	eor	r0, r0
    2e12:	0a 94       	dec	r0
    2e14:	16 16       	cp	r1, r22
    2e16:	17 06       	cpc	r1, r23
    2e18:	18 06       	cpc	r1, r24
    2e1a:	09 06       	cpc	r0, r25
    2e1c:	08 95       	ret

00002e1e <__fp_pscB>:
    2e1e:	00 24       	eor	r0, r0
    2e20:	0a 94       	dec	r0
    2e22:	12 16       	cp	r1, r18
    2e24:	13 06       	cpc	r1, r19
    2e26:	14 06       	cpc	r1, r20
    2e28:	05 06       	cpc	r0, r21
    2e2a:	08 95       	ret

00002e2c <__fp_round>:
    2e2c:	09 2e       	mov	r0, r25
    2e2e:	03 94       	inc	r0
    2e30:	00 0c       	add	r0, r0
    2e32:	11 f4       	brne	.+4      	; 0x2e38 <__fp_round+0xc>
    2e34:	88 23       	and	r24, r24
    2e36:	52 f0       	brmi	.+20     	; 0x2e4c <__fp_round+0x20>
    2e38:	bb 0f       	add	r27, r27
    2e3a:	40 f4       	brcc	.+16     	; 0x2e4c <__fp_round+0x20>
    2e3c:	bf 2b       	or	r27, r31
    2e3e:	11 f4       	brne	.+4      	; 0x2e44 <__fp_round+0x18>
    2e40:	60 ff       	sbrs	r22, 0
    2e42:	04 c0       	rjmp	.+8      	; 0x2e4c <__fp_round+0x20>
    2e44:	6f 5f       	subi	r22, 0xFF	; 255
    2e46:	7f 4f       	sbci	r23, 0xFF	; 255
    2e48:	8f 4f       	sbci	r24, 0xFF	; 255
    2e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4c:	08 95       	ret

00002e4e <__fp_split3>:
    2e4e:	57 fd       	sbrc	r21, 7
    2e50:	90 58       	subi	r25, 0x80	; 128
    2e52:	44 0f       	add	r20, r20
    2e54:	55 1f       	adc	r21, r21
    2e56:	59 f0       	breq	.+22     	; 0x2e6e <__fp_splitA+0x10>
    2e58:	5f 3f       	cpi	r21, 0xFF	; 255
    2e5a:	71 f0       	breq	.+28     	; 0x2e78 <__fp_splitA+0x1a>
    2e5c:	47 95       	ror	r20

00002e5e <__fp_splitA>:
    2e5e:	88 0f       	add	r24, r24
    2e60:	97 fb       	bst	r25, 7
    2e62:	99 1f       	adc	r25, r25
    2e64:	61 f0       	breq	.+24     	; 0x2e7e <__fp_splitA+0x20>
    2e66:	9f 3f       	cpi	r25, 0xFF	; 255
    2e68:	79 f0       	breq	.+30     	; 0x2e88 <__fp_splitA+0x2a>
    2e6a:	87 95       	ror	r24
    2e6c:	08 95       	ret
    2e6e:	12 16       	cp	r1, r18
    2e70:	13 06       	cpc	r1, r19
    2e72:	14 06       	cpc	r1, r20
    2e74:	55 1f       	adc	r21, r21
    2e76:	f2 cf       	rjmp	.-28     	; 0x2e5c <__fp_split3+0xe>
    2e78:	46 95       	lsr	r20
    2e7a:	f1 df       	rcall	.-30     	; 0x2e5e <__fp_splitA>
    2e7c:	08 c0       	rjmp	.+16     	; 0x2e8e <__fp_splitA+0x30>
    2e7e:	16 16       	cp	r1, r22
    2e80:	17 06       	cpc	r1, r23
    2e82:	18 06       	cpc	r1, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	f1 cf       	rjmp	.-30     	; 0x2e6a <__fp_splitA+0xc>
    2e88:	86 95       	lsr	r24
    2e8a:	71 05       	cpc	r23, r1
    2e8c:	61 05       	cpc	r22, r1
    2e8e:	08 94       	sec
    2e90:	08 95       	ret

00002e92 <__fp_zero>:
    2e92:	e8 94       	clt

00002e94 <__fp_szero>:
    2e94:	bb 27       	eor	r27, r27
    2e96:	66 27       	eor	r22, r22
    2e98:	77 27       	eor	r23, r23
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	97 f9       	bld	r25, 7
    2e9e:	08 95       	ret

00002ea0 <__gesf2>:
    2ea0:	8a df       	rcall	.-236    	; 0x2db6 <__fp_cmp>
    2ea2:	08 f4       	brcc	.+2      	; 0x2ea6 <__gesf2+0x6>
    2ea4:	8f ef       	ldi	r24, 0xFF	; 255
    2ea6:	08 95       	ret

00002ea8 <__mulsf3>:
    2ea8:	0b d0       	rcall	.+22     	; 0x2ec0 <__mulsf3x>
    2eaa:	c0 cf       	rjmp	.-128    	; 0x2e2c <__fp_round>
    2eac:	b1 df       	rcall	.-158    	; 0x2e10 <__fp_pscA>
    2eae:	28 f0       	brcs	.+10     	; 0x2eba <__mulsf3+0x12>
    2eb0:	b6 df       	rcall	.-148    	; 0x2e1e <__fp_pscB>
    2eb2:	18 f0       	brcs	.+6      	; 0x2eba <__mulsf3+0x12>
    2eb4:	95 23       	and	r25, r21
    2eb6:	09 f0       	breq	.+2      	; 0x2eba <__mulsf3+0x12>
    2eb8:	a2 cf       	rjmp	.-188    	; 0x2dfe <__fp_inf>
    2eba:	a7 cf       	rjmp	.-178    	; 0x2e0a <__fp_nan>
    2ebc:	11 24       	eor	r1, r1
    2ebe:	ea cf       	rjmp	.-44     	; 0x2e94 <__fp_szero>

00002ec0 <__mulsf3x>:
    2ec0:	c6 df       	rcall	.-116    	; 0x2e4e <__fp_split3>
    2ec2:	a0 f3       	brcs	.-24     	; 0x2eac <__mulsf3+0x4>

00002ec4 <__mulsf3_pse>:
    2ec4:	95 9f       	mul	r25, r21
    2ec6:	d1 f3       	breq	.-12     	; 0x2ebc <__mulsf3+0x14>
    2ec8:	95 0f       	add	r25, r21
    2eca:	50 e0       	ldi	r21, 0x00	; 0
    2ecc:	55 1f       	adc	r21, r21
    2ece:	62 9f       	mul	r22, r18
    2ed0:	f0 01       	movw	r30, r0
    2ed2:	72 9f       	mul	r23, r18
    2ed4:	bb 27       	eor	r27, r27
    2ed6:	f0 0d       	add	r31, r0
    2ed8:	b1 1d       	adc	r27, r1
    2eda:	63 9f       	mul	r22, r19
    2edc:	aa 27       	eor	r26, r26
    2ede:	f0 0d       	add	r31, r0
    2ee0:	b1 1d       	adc	r27, r1
    2ee2:	aa 1f       	adc	r26, r26
    2ee4:	64 9f       	mul	r22, r20
    2ee6:	66 27       	eor	r22, r22
    2ee8:	b0 0d       	add	r27, r0
    2eea:	a1 1d       	adc	r26, r1
    2eec:	66 1f       	adc	r22, r22
    2eee:	82 9f       	mul	r24, r18
    2ef0:	22 27       	eor	r18, r18
    2ef2:	b0 0d       	add	r27, r0
    2ef4:	a1 1d       	adc	r26, r1
    2ef6:	62 1f       	adc	r22, r18
    2ef8:	73 9f       	mul	r23, r19
    2efa:	b0 0d       	add	r27, r0
    2efc:	a1 1d       	adc	r26, r1
    2efe:	62 1f       	adc	r22, r18
    2f00:	83 9f       	mul	r24, r19
    2f02:	a0 0d       	add	r26, r0
    2f04:	61 1d       	adc	r22, r1
    2f06:	22 1f       	adc	r18, r18
    2f08:	74 9f       	mul	r23, r20
    2f0a:	33 27       	eor	r19, r19
    2f0c:	a0 0d       	add	r26, r0
    2f0e:	61 1d       	adc	r22, r1
    2f10:	23 1f       	adc	r18, r19
    2f12:	84 9f       	mul	r24, r20
    2f14:	60 0d       	add	r22, r0
    2f16:	21 1d       	adc	r18, r1
    2f18:	82 2f       	mov	r24, r18
    2f1a:	76 2f       	mov	r23, r22
    2f1c:	6a 2f       	mov	r22, r26
    2f1e:	11 24       	eor	r1, r1
    2f20:	9f 57       	subi	r25, 0x7F	; 127
    2f22:	50 40       	sbci	r21, 0x00	; 0
    2f24:	8a f0       	brmi	.+34     	; 0x2f48 <__mulsf3_pse+0x84>
    2f26:	e1 f0       	breq	.+56     	; 0x2f60 <__mulsf3_pse+0x9c>
    2f28:	88 23       	and	r24, r24
    2f2a:	4a f0       	brmi	.+18     	; 0x2f3e <__mulsf3_pse+0x7a>
    2f2c:	ee 0f       	add	r30, r30
    2f2e:	ff 1f       	adc	r31, r31
    2f30:	bb 1f       	adc	r27, r27
    2f32:	66 1f       	adc	r22, r22
    2f34:	77 1f       	adc	r23, r23
    2f36:	88 1f       	adc	r24, r24
    2f38:	91 50       	subi	r25, 0x01	; 1
    2f3a:	50 40       	sbci	r21, 0x00	; 0
    2f3c:	a9 f7       	brne	.-22     	; 0x2f28 <__mulsf3_pse+0x64>
    2f3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2f40:	51 05       	cpc	r21, r1
    2f42:	70 f0       	brcs	.+28     	; 0x2f60 <__mulsf3_pse+0x9c>
    2f44:	5c cf       	rjmp	.-328    	; 0x2dfe <__fp_inf>
    2f46:	a6 cf       	rjmp	.-180    	; 0x2e94 <__fp_szero>
    2f48:	5f 3f       	cpi	r21, 0xFF	; 255
    2f4a:	ec f3       	brlt	.-6      	; 0x2f46 <__mulsf3_pse+0x82>
    2f4c:	98 3e       	cpi	r25, 0xE8	; 232
    2f4e:	dc f3       	brlt	.-10     	; 0x2f46 <__mulsf3_pse+0x82>
    2f50:	86 95       	lsr	r24
    2f52:	77 95       	ror	r23
    2f54:	67 95       	ror	r22
    2f56:	b7 95       	ror	r27
    2f58:	f7 95       	ror	r31
    2f5a:	e7 95       	ror	r30
    2f5c:	9f 5f       	subi	r25, 0xFF	; 255
    2f5e:	c1 f7       	brne	.-16     	; 0x2f50 <__mulsf3_pse+0x8c>
    2f60:	fe 2b       	or	r31, r30
    2f62:	88 0f       	add	r24, r24
    2f64:	91 1d       	adc	r25, r1
    2f66:	96 95       	lsr	r25
    2f68:	87 95       	ror	r24
    2f6a:	97 f9       	bld	r25, 7
    2f6c:	08 95       	ret

00002f6e <__divmodhi4>:
    2f6e:	97 fb       	bst	r25, 7
    2f70:	07 2e       	mov	r0, r23
    2f72:	16 f4       	brtc	.+4      	; 0x2f78 <__divmodhi4+0xa>
    2f74:	00 94       	com	r0
    2f76:	06 d0       	rcall	.+12     	; 0x2f84 <__divmodhi4_neg1>
    2f78:	77 fd       	sbrc	r23, 7
    2f7a:	08 d0       	rcall	.+16     	; 0x2f8c <__divmodhi4_neg2>
    2f7c:	11 d0       	rcall	.+34     	; 0x2fa0 <__udivmodhi4>
    2f7e:	07 fc       	sbrc	r0, 7
    2f80:	05 d0       	rcall	.+10     	; 0x2f8c <__divmodhi4_neg2>
    2f82:	3e f4       	brtc	.+14     	; 0x2f92 <__divmodhi4_exit>

00002f84 <__divmodhi4_neg1>:
    2f84:	90 95       	com	r25
    2f86:	81 95       	neg	r24
    2f88:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8a:	08 95       	ret

00002f8c <__divmodhi4_neg2>:
    2f8c:	70 95       	com	r23
    2f8e:	61 95       	neg	r22
    2f90:	7f 4f       	sbci	r23, 0xFF	; 255

00002f92 <__divmodhi4_exit>:
    2f92:	08 95       	ret

00002f94 <__tablejump2__>:
    2f94:	ee 0f       	add	r30, r30
    2f96:	ff 1f       	adc	r31, r31
    2f98:	05 90       	lpm	r0, Z+
    2f9a:	f4 91       	lpm	r31, Z
    2f9c:	e0 2d       	mov	r30, r0
    2f9e:	09 94       	ijmp

00002fa0 <__udivmodhi4>:
    2fa0:	aa 1b       	sub	r26, r26
    2fa2:	bb 1b       	sub	r27, r27
    2fa4:	51 e1       	ldi	r21, 0x11	; 17
    2fa6:	07 c0       	rjmp	.+14     	; 0x2fb6 <__udivmodhi4_ep>

00002fa8 <__udivmodhi4_loop>:
    2fa8:	aa 1f       	adc	r26, r26
    2faa:	bb 1f       	adc	r27, r27
    2fac:	a6 17       	cp	r26, r22
    2fae:	b7 07       	cpc	r27, r23
    2fb0:	10 f0       	brcs	.+4      	; 0x2fb6 <__udivmodhi4_ep>
    2fb2:	a6 1b       	sub	r26, r22
    2fb4:	b7 0b       	sbc	r27, r23

00002fb6 <__udivmodhi4_ep>:
    2fb6:	88 1f       	adc	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	5a 95       	dec	r21
    2fbc:	a9 f7       	brne	.-22     	; 0x2fa8 <__udivmodhi4_loop>
    2fbe:	80 95       	com	r24
    2fc0:	90 95       	com	r25
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	08 95       	ret

00002fc8 <strncpy>:
    2fc8:	fb 01       	movw	r30, r22
    2fca:	dc 01       	movw	r26, r24
    2fcc:	41 50       	subi	r20, 0x01	; 1
    2fce:	50 40       	sbci	r21, 0x00	; 0
    2fd0:	48 f0       	brcs	.+18     	; 0x2fe4 <strncpy+0x1c>
    2fd2:	01 90       	ld	r0, Z+
    2fd4:	0d 92       	st	X+, r0
    2fd6:	00 20       	and	r0, r0
    2fd8:	c9 f7       	brne	.-14     	; 0x2fcc <strncpy+0x4>
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <strncpy+0x16>
    2fdc:	1d 92       	st	X+, r1
    2fde:	41 50       	subi	r20, 0x01	; 1
    2fe0:	50 40       	sbci	r21, 0x00	; 0
    2fe2:	e0 f7       	brcc	.-8      	; 0x2fdc <strncpy+0x14>
    2fe4:	08 95       	ret

00002fe6 <_exit>:
    2fe6:	f8 94       	cli

00002fe8 <__stop_program>:
    2fe8:	ff cf       	rjmp	.-2      	; 0x2fe8 <__stop_program>
